<?php

namespace App\Repository\Notification;

use App\Entity\Notification\Message;
use App\Entity\Notification\Notification;
use App\Entity\Notification\Transport;
use Doctrine\Common\Collections\Criteria;
use Doctrine\DBAL\Types\Type;
use Doctrine\DBAL\Types\Types;
use \Doctrine\ORM\EntityRepository;

/**
 * MessageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MessageRepository extends EntityRepository
{
    /**
     * @param bool $iterate
     * @return mixed
     * @throws \Exception
     */
    public function findMessageToSend(bool $iterate = false)
    {
        $qb = $this->createQueryBuilder('m');

        $q = $qb
            ->select('m')
            ->where(
                $qb->expr()->andX(
                    $qb->expr()->eq('m.status', ':status'),
                    $qb->expr()->lte('m.sendingTime', ':dt')
                )
            )
            ->setParameter('status', Message::TYPE_PENDING, Types::STRING)
            ->setParameter('dt', new \DateTime(), Types::DATETIME_MUTABLE)
            ->getQuery();

        if ($iterate) {
            return $q->iterate();
        }

        return $q->getResult();
    }

    /**
     * @param mixed $recipient
     * @param Transport $transport
     * @param string $status
     * @param int|null $vehicleId
     * @return mixed
     * @throws \Exception
     */
    public function findMessages($recipient, Transport $transport, string $status, ?int $vehicleId)
    {
        $query = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('nt_m')
            ->from(Message::class, 'nt_m')
            ->leftJoin('nt_m.notification', 'nt')
            ->where('nt_m.status = :status')
            ->andWhere('nt_m.transportType = :transportTypes')
            ->andWhere('nt_m.sendingTime < :now')
            ->andWhere('nt_m.recipient = :recipient')
            ->setParameter('transportTypes', $transport->getName())
            ->setParameter('status', $status, Types::STRING)
            ->setParameter('now', new \DateTime())
            ->setParameter('recipient', $recipient)
            ->orderBy('nt_m.sendingTime', Criteria::DESC);

        if ($vehicleId ?? null) {
            $query->leftJoin('nt_m.eventLog', 'ev_l')
                ->andWhere('(CAST(JSON_GET_PATH(ev_l.details, :jsonPath1) AS integer) = :vehicleId)
                                OR (CAST(JSON_GET_PATH(ev_l.details, :jsonPath2) AS integer) = :vehicleId)
                                OR (CAST(JSON_GET_PATH(ev_l.details, :jsonPath3) AS integer) = :vehicleId)')
                ->setParameter('jsonPath1', '{vehicle, id}')
                ->setParameter('jsonPath2', '{vehicleId}')
                ->setParameter('jsonPath3', '{device, deviceInstallation, vehicle, id}')
                ->setParameter('vehicleId', $vehicleId);
        }

        return $query->getQuery();
    }

    /**
     * @param mixed $recipient
     * @param Transport $transport
     * @param string $status
     * @return mixed
     * @throws \Doctrine\ORM\NoResultException
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function countUnreadMessages($recipient, Transport $transport, string $status)
    {
        $q = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('COUNT(nt_m) as count')
            ->from(Message::class, 'nt_m')
            ->leftJoin('nt_m.notification', 'nt')
            ->where('nt_m.transportType = :transportTypes')
            ->andWhere('nt_m.recipient = :recipient')
            ->andWhere('nt_m.status = :status')
            ->andWhere('nt_m.isRead = false')
            ->setParameter('transportTypes', $transport->getName())
            ->setParameter('status', $status, Types::STRING)
            ->setParameter('recipient', $recipient)
            ->getQuery();

        return $q->getSingleResult();
    }

    /**
     * @param $recipient
     * @param string $status
     * @param array $transport
     * @param bool $iterate
     * @return \Doctrine\ORM\Internal\Hydration\IterableResult|mixed
     * @throws \Exception
     */
    public function findUnreadMessages($recipient, string $status, array $transport, bool $iterate = false)
    {
        $qb = $this->createQueryBuilder('nt_m');

        $q = $qb
            ->select('nt_m')
            ->where(
                $qb->expr()->andX(
                    $qb->expr()->eq('nt_m.recipient', ':recipient'),
                    $qb->expr()->eq('nt_m.status', ':status'),
                    $qb->expr()->eq('nt_m.isRead', 'false'),
                    $qb->expr()->in('nt_m.transportType', ':transportTypes'),
                    $qb->expr()->lte('nt_m.sendingTime', ':dt')
                )
            )
            ->setParameter('recipient', $recipient)
            ->setParameter('status', $status, Types::STRING)
            ->setParameter('transportTypes', $transport)
            ->setParameter('dt', new \DateTime(), Types::DATETIME_MUTABLE)
            ->getQuery();

        if ($iterate) {
            return $q->iterate();
        }

        return $q->getResult();
    }

    public function findMessagesByVehicle(
        string $dateFrom,
        string $dateTo,
        Transport $transport,
        string $status,
        ?int $vehicleId,
        int $teamId,
        $recipient = null,
    ) {
        $qb = $this->getEntityManager()->createQueryBuilder();

        $query = $qb
            ->select('nt_m')
            ->from(Message::class, 'nt_m')
            ->leftJoin('nt_m.notification', 'nt')
            ->leftJoin('nt_m.eventLog', 'el')
            ->leftJoin('el.team', 'team')
            ->where('nt_m.status = :status')
            ->andWhere('nt_m.transportType = :transportTypes')
            ->andWhere(
                $qb->expr()->andX(
                    $qb->expr()->between('nt_m.sendingTime', ':dateFrom', ':dateTo')
                )
            )
//            ->andWhere('nt_m.recipient = :recipient')
            ->andWhere('team.id = :teamId')
            ->setParameter('transportTypes', $transport->getName())
            ->setParameter('status', $status, Types::STRING)
//            ->setParameter('recipient', $recipient)
            ->setParameter('dateFrom', $dateFrom)
            ->setParameter('dateTo', $dateTo)
            ->setParameter('teamId', $teamId)
            ->orderBy('nt_m.sendingTime', Criteria::ASC);

        if ($recipient) {
            $query->andWhere('nt_m.recipient = :recipient')
                ->setParameter('recipient', $recipient);
        }

        if ($vehicleId ?? null) {
//            $query->leftJoin('nt_m.eventLog', 'ev_l')
            $query->andWhere(
                'el.vehicleId = :vehicleId'
            )
                ->setParameter('vehicleId', $vehicleId);
        }

        return $query->getQuery();
    }

    /**
     * @param string $dateFrom
     * @param string $dateTo
     * @param $recipient
     * @param Transport $transport
     * @param string $status
     * @param int|null $assetId
     * @return \Doctrine\ORM\Query
     */
    public function findMessagesByAsset(
        string $dateFrom,
        string $dateTo,
        $recipient,
        Transport $transport,
        string $status,
        ?int $assetId
    ) {
        $qb = $this->getEntityManager()->createQueryBuilder();

        $query = $qb
            ->select('nt_m')
            ->from(Message::class, 'nt_m')
            ->leftJoin('nt_m.notification', 'nt')
            ->leftJoin('nt_m.eventLog', 'el')
            ->where('nt_m.status = :status')
            ->andWhere('nt_m.transportType = :transportTypes')
            ->andWhere(
                $qb->expr()->andX(
                    $qb->expr()->between('nt_m.sendingTime', ':dateFrom', ':dateTo')
                )
            )
            ->andWhere('nt_m.recipient = :recipient')
            ->setParameter('transportTypes', $transport->getName())
            ->setParameter('status', $status, Types::STRING)
            ->setParameter('recipient', $recipient)
            ->setParameter('dateFrom', $dateFrom)
            ->setParameter('dateTo', $dateTo)
            ->orderBy('nt_m.sendingTime', Criteria::ASC);

        if ($assetId ?? null) {
            $query->leftJoin('nt_m.eventLog', 'ev_l')
                ->andWhere(
                    $qb->expr()->orX(
                        $qb->expr()->eq('JSONB_CONTAINS(ev_l.details, :jsonPath1)', 'true')
                    )
                )
                ->setParameter('jsonPath1', '{"id":' . $assetId . '}');
        }

        return $query->getQuery();
    }

    public function findMessageDuplicatesCount(
        Notification $notification,
        \DateTime $occurrenceDate,
        string $transportType,
        string $recipient,
        ?array $body = null,
        ?string $status = null,
    ): int {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $query = $qb
            ->select('COUNT(m) as count_m')
            ->from(Message::class, 'm')
            ->where('m.notification = :notification')
            ->andWhere('m.occurrenceTime = :occurrenceDate')
            ->andWhere('m.transportType = :transportType')
            ->andWhere('m.recipient = :recipient')
            ->setParameter('notification', $notification)
            ->setParameter('occurrenceDate', $occurrenceDate)
            ->setParameter('transportType', $transportType)
            ->setParameter('recipient', $recipient);

        if ($body) {
            $query->andWhere('CAST(m.body AS text) = :body')
                ->setParameter('body', json_encode($body));
        }
        if ($status) {
            $query->andWhere('m.status = :status')
                ->setParameter('status', $status, Types::STRING);
        }

        return $query->getQuery()->getSingleScalarResult();
    }
}
