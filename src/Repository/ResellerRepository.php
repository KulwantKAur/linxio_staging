<?php

namespace App\Repository;

use App\Entity\Client;
use App\Entity\Reseller;
use App\Entity\User;

/**
 * PlanRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ResellerRepository extends \Doctrine\ORM\EntityRepository
{
    public function getResellerClientTeams(Reseller $reseller)
    {
        $result = $this->getEntityManager()->createQueryBuilder()
            ->select('IDENTITY(c.team) as id')
            ->from(Client::class, 'c')
            ->andWhere('c.ownerTeam = :team')
            ->setParameter('team', $reseller->getTeam())
            ->getQuery()
            ->getResult();

        return $result ? array_column($result, 'id') : null;
    }

    /**
     * @param User $user
     * @return array|null
     */
    public function getAdminResellerTeams(User $user): ?array
    {
        $result = $this->getEntityManager()->createQueryBuilder()
            ->select('IDENTITY(r.team) as id')
            ->from(Reseller::class, 'r')
            ->leftJoin('r.createdBy', 'u')
            ->leftJoin('r.team', 't')
            ->andWhere('u.team = :team')
            ->setParameter('team', $user->getTeam())
            ->getQuery()
            ->getResult();

        return $result ? array_column($result, 'id') : null;
    }

    /**
     * @param Reseller $reseller
     * @param array $params
     * @return float|int|mixed|string|null
     */
    public function getResellerClientTeamsWithName(Reseller $reseller, array $params)
    {
        $searchName = $params['name'] ?? null;

        $qb = $this->getEntityManager()
            ->createQueryBuilder();

        $qb->select('IDENTITY(c.team) as id, c.name')
            ->from(Client::class, 'c')
            ->andWhere('c.ownerTeam = :team')
            ->setParameter('team', $reseller->getTeam())
            ->getQuery()
            ->getResult();

        if ($searchName) {
            $qb->andWhere('LOWER(c.name) LIKE LOWER(:name)')
                ->setParameter('name', $searchName . '%');
        }

        $result =  $qb->getQuery()->getResult();

        return  $result ?? null;
    }

    /**
     * @param User $user
     * @param array $params
     * @return array|null
     */
    public function getResellerTeamsByUser(User $user, array $params): ?array
    {
        $searchName = $params['name'] ?? null;

        $qb = $this->getEntityManager()
            ->createQueryBuilder();

        $qb->select('DISTINCT(r.team) as id, r.companyName as name')
            ->from(Reseller::class, 'r')
            ->leftJoin('r.createdBy', 'u')
            ->leftJoin('r.team', 't')
            ->andWhere('u.team = :team')
            ->setParameter('team', $user->getTeam())
            ->getQuery()
            ->getResult();

        if ($searchName) {
            $qb->andWhere('LOWER(r.companyName) LIKE LOWER(:name)')
                ->setParameter('name', $searchName . '%');
        }

        $result =  $qb->getQuery()->getResult();

        return  $result ?? null;
    }

    /**
     * @param string $abn
     * @return Reseller|null
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getResellerByAbn(string $abn): ?Reseller
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('r')
            ->from(Reseller::class, 'r')
            ->where('r.taxNr = :abn')
            ->setParameter('abn', $abn)
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();
    }

    /**
     * @param string $chevronAccountId
     * @return Reseller|null
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getResellerByChevronAccountId(string $chevronAccountId): ?Reseller
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('r')
            ->from(Reseller::class, 'r')
            ->where('r.chevronAccountId = :chevronAccountId')
            ->setParameter('chevronAccountId', $chevronAccountId)
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();
    }

    public function getResellerByTeamId(int $teamId)
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('r')
            ->from(Reseller::class, 'r')
            ->where('IDENTITY(r.team) = :teamId')
            ->setParameter('teamId', $teamId)
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();
    }
}
