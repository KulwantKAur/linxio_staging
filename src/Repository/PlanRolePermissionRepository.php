<?php

namespace App\Repository;

use App\Entity\Permission;
use App\Entity\PlanRolePermission;
use App\Entity\Setting;
use App\Entity\User;
use App\Fixtures\PlansPermissions\InitPlansPermissionsFixture;
use Symfony\Component\Security\Core\User\UserInterface;

/**
 * PlanRolePermissionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PlanRolePermissionRepository extends \Doctrine\ORM\EntityRepository
{
    public function getUserPermissions(UserInterface $user)
    {
        if (!($user instanceof User)) {
            return [];
        }
        $exclude = $user->getExcludePermissions();

        $q = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('pp')
            ->from(PlanRolePermission::class, 'p')
            ->leftJoin(Permission::class, 'pp', 'WITH', 'p.permission = pp')
            ->andWhere('p.role = :role')
            ->setParameter('role', $user->getRole());

        if (!empty($user->getGroupsPermissionsIds())) {
            $q->andWhere('pp.id IN (:ids)')->setParameter('ids', $user->getGroupsPermissionsIds());
        }

        if ($user->getPlan()) {
            $q->andWhere('p.plan = :plan')->setParameter('plan', $user->getPlan());
        } else {
            $q->andWhere('p.plan IS NULL');
        }

        if ($exclude) {
            $q->andWhere('pp.name NOT IN (:exclude)')->setParameter('exclude', $exclude);
        }

        $permissions = $q->getQuery()->getResult();

        if ($user->isInClientTeam()) {
            $userPlanPermissions = InitPlansPermissionsFixture::PLANS_PERMISSIONS[$user->getPlan()->getName()]['roles'][$user->getRole()->getName()] ?? [];
            $permissions = array_filter($permissions, function (Permission $permission) use ($userPlanPermissions) {
                return in_array($permission->getName(), $userPlanPermissions);
            });
        }

        if ($user->getTeam()->isChevron()) {
            $permissions = array_filter($permissions, function (Permission $permission) {
                return $permission->getName() !== Permission::FUEL_IMPORT_DATA;
            });
        }

        foreach ($permissions as $permission) {
            if (isset(Permission::MOBILE_MAPPER[$permission->getName()])) {
                $permissions[] = new Permission([
                    'name' => Permission::MOBILE_MAPPER[$permission->getName()],
                    'displayName' => Permission::MOBILE_MAPPER[$permission->getName()]
                ]);
            }
        }

        return $permissions;
    }

    public function getUserPermissionIds(UserInterface $user, ?int $excludeGroupIds = null)
    {
        $q = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('pp')
            ->from(PlanRolePermission::class, 'p')
            ->leftJoin(Permission::class, 'pp', 'WITH', 'p.permission = pp')
            ->andWhere('p.role = :role')
            ->setParameter('role', $user->getRole());

        if (!empty($user->getGroupsPermissionsIds($excludeGroupIds))) {
            $q->andWhere('pp.id IN (:ids)')->setParameter('ids', $user->getGroupsPermissionsIds($excludeGroupIds));
        }

        if ($user->getPlan()) {
            $q->andWhere('p.plan = :plan')->setParameter('plan', $user->getPlan());
        } else {
            $q->andWhere('p.plan IS NULL');
        }

        $permissions = $q->getQuery()->getResult();

        if ($user->isInClientTeam()) {
            $userPlanPermissions = InitPlansPermissionsFixture::PLANS_PERMISSIONS[$user->getPlan()->getName()]['roles'][$user->getRole()->getName()] ?? [];
            $permissions = array_filter($permissions, function (Permission $permission) use ($userPlanPermissions) {
                return in_array($permission->getName(), $userPlanPermissions);
            });
        }

        return array_map(fn(Permission $permission) => $permission->getId(), $permissions);
    }
}