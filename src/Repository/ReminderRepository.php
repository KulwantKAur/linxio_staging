<?php

namespace App\Repository;

use App\Entity\Reminder;
use App\Entity\Team;
use App\Entity\User;
use App\Entity\UserGroup;

/**
 * ReminderRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ReminderRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param bool $iterate
     * @return \Doctrine\ORM\Internal\Hydration\IterableResult|mixed
     */
    public function getActiveReminders(bool $iterate = false)
    {
        $qb = $this->createQueryBuilder('r');

        $q = $qb
            ->select('r')
            ->where(
                $qb->expr()->andX(
                    $qb->expr()->in(
                        'r.status',
                        [Reminder::STATUS_ACTIVE, Reminder::STATUS_DUE_SOON, Reminder::STATUS_DRAFT]
                    )
                )
            )
            ->getQuery();

        if ($iterate) {
            return $q->toIterable();
        }

        return $q->getResult();
    }

    /**
     * @param User $user
     * @param string $status
     * @return mixed
     * @throws \Doctrine\ORM\NoResultException
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getCountByStatus(User $user, string $status)
    {
        $qb = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('count(r) as count')
            ->from(Reminder::class, 'r')
            ->innerJoin('r.vehicle', 'v')
            ->andWhere('r.status = :status')
            ->andWhere('v.team = :team')
            ->setParameter('team', $user->getTeam())
            ->setParameter('status', $status);

        if ($user->needToCheckUserGroup()) {
            $vehicleIds = $this->getEntityManager()->getRepository(UserGroup::class)->getUserVehiclesIdFromUserGroup($user);
            $qb->andWhere('v.id IN (:vehicleIds)')->setParameter('vehicleIds', $vehicleIds);
        }

        return $qb->getQuery()->getSingleResult()['count'];
    }

    /**
     * @param User $user
     * @param int $count
     * @return mixed
     */
    public function getLastReminders(User $user, $count = 3)
    {
        $qb = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('r')
            ->from(Reminder::class, 'r')
            ->innerJoin('r.vehicle', 'v')
            ->andWhere('v.team = :team')
            ->andWhere('r.status IN (:reminderStatus)')
            ->setParameter('team', $user->getTeam())
            ->setParameter('reminderStatus', Reminder::DASHBOARD_STATUSES)
            ->orderBy('r.date')
            ->setMaxResults($count);

        if ($user->needToCheckUserGroup()) {
            $vehicleIds = $this->getEntityManager()->getRepository(UserGroup::class)->getUserVehiclesIdFromUserGroup($user);
            $qb->andWhere('v.id IN (:vehicleIds)')->setParameter('vehicleIds', $vehicleIds);
        }

        return $qb->getQuery()->getResult();
    }

    /**
     * @param $id
     * @param User $currentUser
     * @return mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getReminderById($id, User $currentUser)
    {
        $qb = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('r')
            ->from(Reminder::class, 'r')
            ->andWhere('r.id = :id')
            ->setParameter('id', $id)
            ->setMaxResults(1);

        if ($currentUser->needToCheckUserGroup()) {
            $vehicleIds = $this->getEntityManager()->getRepository(UserGroup::class)->getUserVehiclesIdFromUserGroup($currentUser);
            $qb->andWhere('IDENTITY(r.vehicle) IN (:vehicleIds)')->setParameter('vehicleIds', $vehicleIds);
        }


        return $qb->getQuery()->getOneOrNullResult();
    }
}