<?php

namespace App\Repository;

use App\Command\UpdateChatDataCommand;
use App\Entity\Chat;
use App\Entity\ChatHistory;
use Carbon\Carbon;
use Doctrine\Common\Collections\Criteria;
use Doctrine\ORM\Query;

/**
 * ChatHistoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ChatHistoryRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @return ChatHistory|null
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getLastSentDatetime(): ?\DateTimeInterface
    {
        return $this->getEntityManager()->createQueryBuilder()
            ->select('ch.sentAt')
            ->from(ChatHistory::class, 'ch')
            ->orderBy('ch.sentAt', Criteria::DESC)
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();
    }

    /**
     * @param int $messageId
     * @param int $chatId
     * @return ChatHistory|null
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getChatMessage(int $messageId, int $chatId): ?ChatHistory
    {
        return $this->getEntityManager()->createQueryBuilder()
            ->select('ch')
            ->from(ChatHistory::class, 'ch')
            ->where('ch.id = :id')
            ->andWhere('ch.chat = :chatId')
            ->setParameter('id', $messageId)
            ->setParameter('chatId', $chatId)
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();
    }

    /**
     * @return Query
     * @throws \Exception
     */
    public function getChatMessagesWithOldAttachmentsQuery(): Query
    {
        $date = (new Carbon())->subDays(UpdateChatDataCommand::ALLOWED_ATTACHMENTS_DAYS);

        return $this->getEntityManager()->createQueryBuilder()
            ->select('ch')
            ->from(ChatHistory::class, 'ch')
            ->leftJoin('ch.file', 'f')
            ->where('ch.file IS NOT NULL')
            ->andWhere('ch.createdAt < :date')
            ->andWhere('f.url IS NOT NULL')
            ->setParameter('date', $date)
            ->getQuery();
    }

    /**
     * @return int
     * @throws \Exception
     */
    public function getChatMessagesWithOldAttachmentsCount(): int
    {
        $date = (new Carbon())->subDays(UpdateChatDataCommand::ALLOWED_ATTACHMENTS_DAYS);

        return $this->getEntityManager()->createQueryBuilder()
            ->select('COUNT(ch.id)')
            ->from(ChatHistory::class, 'ch')
            ->leftJoin('ch.file', 'f')
            ->where('ch.file IS NOT NULL')
            ->andWhere('ch.createdAt < :date')
            ->andWhere('f.url IS NOT NULL')
            ->setParameter('date', $date)
            ->getQuery()
            ->getSingleScalarResult();
    }

    /**
     * @return array
     * @throws \Exception
     */
    public function getChatMessagesWithOldAttachmentsIds(): array
    {
        $date = (new Carbon())->subDays(UpdateChatDataCommand::ALLOWED_ATTACHMENTS_DAYS);

        return $this->getEntityManager()->createQueryBuilder()
            ->select('ch.id')
            ->from(ChatHistory::class, 'ch')
            ->leftJoin('ch.file', 'f')
            ->where('ch.file IS NOT NULL')
            ->andWhere('ch.createdAt < :date')
            ->andWhere('f.url IS NOT NULL')
            ->setParameter('date', $date)
            ->getQuery()
            ->getArrayResult();
    }

    /**
     * @param Chat $chat
     * @param string|null $message
     * @param string $sort
     * @param string $order
     * @return Query
     */
    public function getAllChatMessagesQuery(
        Chat $chat,
        ?string $message,
        string $sort,
        string $order
    ): Query {
        switch ($sort) {
            case 'userId':
                $sort = 'user';
                break;
            default:
                break;
        }

        $query = $this->getEntityManager()->createQueryBuilder()
            ->select('ch')
            ->from(ChatHistory::class, 'ch')
            ->where('ch.chat = :chatId')
            ->setParameter('chatId', $chat->getId())
            ->orderBy('ch.' . $sort, $order);

        if ($message) {
            $query->andWhere('LOWER(ch.message) LIKE LOWER(:message)')
                ->setParameter('message', '%' . $message . '%');
        }

        return $query->getQuery();
    }

    /**
     * @param int $chatId
     * @param array $userIds
     * @return ChatHistory|null
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getChatMessageWithNewLeader(int $chatId, array $userIds): ?ChatHistory
    {
        return $this->getEntityManager()->createQueryBuilder()
            ->select('ch')
            ->from(ChatHistory::class, 'ch')
            ->where('ch.chat = :chatId')
            ->andWhere('ch.type = :type')
            ->andWhere('ch.event = :event')
            ->andWhere('ch.eventSource IN (:userIds)')
            ->setParameter('chatId', $chatId)
            ->setParameter('type', ChatHistory::TYPE_SYSTEM)
            ->setParameter('event', ChatHistory::EVENT_USERS_ADDED_ID)
            ->setParameter('userIds', $userIds)
            ->orderBy('ch.id')
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();
    }
}
