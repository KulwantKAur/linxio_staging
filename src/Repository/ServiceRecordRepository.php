<?php

namespace App\Repository;

use App\Entity\Depot;
use App\Entity\Reminder;
use App\Entity\ReminderCategory;
use App\Entity\RepairData;
use App\Entity\ServiceRecord;
use App\Entity\Team;
use App\Entity\User;
use App\Entity\UserGroup;
use App\Entity\Vehicle;
use App\Entity\VehicleGroup;
use App\Util\Doctrine\DoctrineHelper;
use Doctrine\ORM\Query\Expr\Orx;

/**
 * ServiceRecordRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ServiceRecordRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param int $serviceRecordId
     * @param int $reminderId
     * @return mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findByServiceRecordIdAndReminderId(int $serviceRecordId, int $reminderId)
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('sr')
            ->from(ServiceRecord::class, 'sr')
            ->leftJoin('sr.reminder', 'r')
            ->andWhere('r.id = :reminderId')
            ->andWhere('sr.id = :serviceRecordId')
            ->setParameter('reminderId', $reminderId)
            ->setParameter('serviceRecordId', $serviceRecordId)
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();
    }

    /**
     * @param Team $team
     * @return mixed
     */
    public function getServiceRecordIdsByTeam(Team $team)
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('sr.id')
            ->from(ServiceRecord::class, 'sr')
            ->leftJoin('sr.reminder', 'r')
            ->leftJoin('r.vehicle', 'v')
            ->andWhere('r.vehicle = v')
            ->andWhere('v.team = :team')
            ->setParameter('team', $team)
            ->andWhere('v.status IN (:statuses)')
            ->setParameter('statuses', Vehicle::LIST_STATUSES)
            ->getQuery()
            ->getResult();
    }

    /**
     * @param User $user
     * @param $startDate
     * @param $endDate
     * @param int $count
     * @return mixed
     */
    public function getExpensiveVehiclesByTeam(User $user, $startDate, $endDate, $count = 3)
    {
        $qb = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('v.id, v.regNo, sum(sr.cost) as sum_cost')
            ->from(ServiceRecord::class, 'sr')
            ->innerJoin('sr.repairData', 'rd')
            ->innerJoin('rd.vehicle', 'v')
            ->andWhere('v.team = :team')
            ->andWhere('sr.reminder IS NULL')
            ->andWhere('sr.date >= :dateFrom')
            ->andWhere('sr.date <= :dateTo')
            ->setParameter('dateFrom', $startDate)
            ->setParameter('dateTo', $endDate)
            ->setParameter('team', $user->getTeam())
            ->orderBy('sum_cost', 'DESC')
            ->setMaxResults($count)
            ->groupBy('v.id');

        if ($user->needToCheckUserGroup()) {
            $vehicleIds = $this->getEntityManager()->getRepository(UserGroup::class)
                ->getUserVehiclesIdFromUserGroup($user);
            $qb->andWhere('v.id IN (:vehicleIds)')->setParameter('vehicleIds', $vehicleIds);
        }

        return $qb->getQuery()->getResult();
    }

    /**
     * @param User $user
     * @param $startDate
     * @param $endDate
     * @return mixed
     */
    public function getRepairsCost(User $user, $startDate, $endDate)
    {
        $q = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('SUM(sr.cost) as cost')
            ->from(ServiceRecord::class, 'sr')
            ->innerJoin('sr.repairData', 'rd')
            ->innerJoin('rd.vehicle', 'v')
            ->andWhere('sr.reminder IS NULL')
            ->andWhere('v.team = :team')
            ->setParameter('team', $user->getTeam())
            ->andWhere('sr.date >= :dateFrom')
            ->andWhere('sr.date <= :dateTo')
            ->setParameter('dateFrom', $startDate)
            ->setParameter('dateTo', $endDate);

        if ($user->needToCheckUserGroup()) {
            $vehicleIds = $this->getEntityManager()->getRepository(UserGroup::class)
                ->getUserVehiclesIdFromUserGroup($user);
            $q->andWhere('v.id IN (:vehicleIds)')->setParameter('vehicleIds', $vehicleIds);
        }

        return array_sum(array_column($q->getQuery()->getResult(), 'cost'));
    }

    /**
     * @param array $data
     * @param bool $vehicleId
     * @return mixed
     */
    public function getServiceSummary(array $data, $vehicleId = false)
    {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $dateFrom = $data['startDate'];
        $dateTo = $data['endDate'];

        $vehicleDefaultLabel = $data['defaultLabel'];
        $vehicleRegNo = $data['vehicleRegNo'];
        $vehicleGroup = $data['vehicleGroup'];
        $vehicleDepot = $data['vehicleDepot'];
        $vehicleIds = $data['vehicleIds'];
        $teamId = $data['teamId'];
        $order = $data['order'];
        $sort = $data['sort'];

        $srTable = $em->getClassMetadata(ServiceRecord::class)->getTableName();
        $rTable = $em->getClassMetadata(Reminder::class)->getTableName();
        $rdTable = $em->getClassMetadata(RepairData::class)->getTableName();
        $vTable = $em->getClassMetadata(Vehicle::class)->getTableName();
        $vgTable = $em->getClassMetadata(VehicleGroup::class)->getTableName();
        $depotTable = $em->getClassMetadata(Depot::class)->getTableName();

        $remindersSubQuery = $em->getConnection()->createQueryBuilder()
            ->select(
                'vehicle_id, count(sr.id)::INTEGER as sr_count, SUM(sr.cost) as sr_cost'
            )
            ->from($srTable, 'sr')
            ->innerJoin('sr', $rTable, 'r', 'r.id = sr.reminder_id')
            ->andWhere(
                $qb->expr()->andX(
                    $qb->expr()->between('sr.date', ':dateFrom', ':dateTo'),
                    $qb->expr()->neq('sr.status', ':draftStatus'),
                    $qb->expr()->neq('sr.status', ':deletedStatus')
                )
            )
            ->groupBy('r.vehicle_id');

        $repairSubQuery = $em->getConnection()->createQueryBuilder()
            ->select(
                'vehicle_id, count(sr.id)::INTEGER as sr_count, SUM(sr.cost) as sr_cost'
            )
            ->from($srTable, 'sr')
            ->innerJoin('sr', $rdTable, 'rd', 'rd.id = sr.repair_data')
            ->andWhere(
                $qb->expr()->andX(
                    $qb->expr()->between('sr.date', ':dateFrom', ':dateTo'),
                    $qb->expr()->neq('sr.status', ':draftStatus'),
                    $qb->expr()->neq('sr.status', ':deletedStatus')
                )
            )
            ->groupBy('rd.vehicle_id');

        $remindersAndRepairsUnion = $em->getConnection()->createQueryBuilder()
            ->select('SUM(records.sr_count)::INTEGER as sr_count, records.vehicle_id, SUM(records.sr_cost) as sr_cost')
            ->from(
                '(' . DoctrineHelper::unionQueryBuilders([$remindersSubQuery, $repairSubQuery]) . ') as',
                'records'
            )
            ->groupBy('vehicle_id');

        $groupsSubQuery = $em->getConnection()->createQueryBuilder()
            ->select('string_agg(vg.name, \', \') AS groups, vgs.vehicle_id')
            ->from('vehicles_groups', 'vgs')
            ->leftJoin('vgs', $vgTable, 'vg', 'vg.id =vgs.vehicle_group_id')
            ->groupBy('vgs.vehicle_id');

        $serviceRecordLastDate = $em->getConnection()->createQueryBuilder()
            ->select(
                'vehicle_id as sr_vehicle_id, to_char(MAX(sr.date), \'YYYY-MM-DD"T"HH24:MI:SS"+00:00"\') as sr_last_date'
            )
            ->from($rTable, 'r')
            ->rightJoin('r', $srTable, 'sr', 'r.id = sr.reminder_id')
            ->andWhere(
                $qb->expr()->andX(
                    $qb->expr()->between('sr.date', ':dateFrom', ':dateTo'),
                    $qb->expr()->neq('sr.status', ':draftStatus'),
                    $qb->expr()->neq('sr.status', ':deletedStatus')
                )
            )->groupBy('r.vehicle_id');

        $query = $this
            ->getEntityManager()
            ->getConnection()
            ->createQueryBuilder();
        if ($vehicleId) {
            $query->select('v.id, v.regNo');
        } else {
            $query->select("v.defaultLabel, v.regNo, NULLIF(v.model, '') as model, v.id as vehicle_id")
                ->addSelect('vgs.groups')
                ->addSelect('depot.name as depot_name, depot.id as depotId')
                ->addSelect('COALESCE(sr_count, 0) as sr_count, sr_cost')
                ->addSelect('srld.sr_last_date');
        }
        $query->from($vTable, 'v')
            ->leftJoin(
                'v',
                sprintf('(%s)', $remindersAndRepairsUnion->getSQL()),
                'r',
                'r.vehicle_id = v.id'
            )
            ->leftJoin('v', $depotTable, 'depot', 'v.depot_id = depot.id')
            ->leftJoin(
                'v',
                sprintf('(%s)', $groupsSubQuery->getSQL()),
                'vgs',
                'vgs.vehicle_id = v.id'
            )->leftJoin(
                'v',
                sprintf('(%s)', $serviceRecordLastDate->getSQL()),
                'srld',
                'srld.sr_vehicle_id = v.id'
            )
            ->setParameter('dateFrom', $dateFrom)
            ->setParameter('dateTo', $dateTo)
            ->setParameter('draftStatus', ServiceRecord::STATUS_DRAFT)
            ->setParameter('deletedStatus', ServiceRecord::STATUS_DELETED)
            ->orderBy($sort, $order);

        if ($vehicleDefaultLabel) {
            if (is_array($vehicleDefaultLabel)) {
                $q = [];
                foreach ($vehicleDefaultLabel as $index => $label) {
                    $q[] = $qb->expr()->like('LOWER(v.defaultLabel)', ":label$index");
                    $query->setParameter("label$index", strtolower($label).'%');
                }
                $query->andWhere(new Orx($q));
            } else {
                $query->andWhere('LOWER(v.defaultLabel) LIKE LOWER(:defaultLabel)')
                    ->setParameter('defaultLabel', $vehicleDefaultLabel . '%');
            }
        }

        if ($vehicleRegNo) {
            $query->andWhere('LOWER(v.regNo) LIKE LOWER(:regNo)')
                ->setParameter('regNo', $vehicleRegNo . '%');
        }

        if ($vehicleDepot) {
            $query->andWhere('depot_id = :depotId')
                ->setParameter('depotId', $vehicleDepot);
        }

        if ($vehicleIds) {
            $query->andWhere('v.id IN (' . implode(', ', $vehicleIds) . ')');
        }

        if ($vehicleGroup) {
            $query->setParameter('vehicleGroup', $vehicleGroup);

            $groupsFilterSubQuery = $em->getConnection()->createQueryBuilder()
                ->select('vgs.vehicle_id')
                ->from('vehicles_groups', 'vgs')
                ->leftJoin('vgs', $vgTable, 'vg', 'vg.id =vgs.vehicle_group_id')
                ->groupBy('vgs.vehicle_id')
                ->andWhere('vg.id IN (:vehicleGroup)');

            $query->rightJoin(
                'v',
                sprintf('(%s)', $groupsFilterSubQuery->getSQL()),
                'vgsf',
                'vgsf.vehicle_id = v.id'
            );
        }

        if ($teamId) {
            $query->andWhere('v.team_id IN (' . implode(', ', $teamId) . ')')->setParameter('teamId', $teamId);
        }

        return $query;
    }

    /**
     * @param array $data
     * @param null $type
     * @param bool $vehicleList
     * @return mixed
     */
    public function getServiceDetailed(array $data, $type = null, $vehicleList = false)
    {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $dateFrom = $data['startDate'];
        $dateTo = $data['endDate'];

        $vehicleDefaultLabel = $data['defaultLabel'];
        $vehicleRegNo = $data['vehicleRegNo'];
        $vehicleGroup = $data['vehicleGroup'];
        $vehicleDepot = $data['vehicleDepot'];
        $vehicleIds = $data['vehicleIds'];
        $repairTitle = $data['repairTitle'];
        $title = $data['title'];
        $rCategoryId = $data['r_category'];
        $teamId = $data['teamId'];
        $vehicleId = $data['vehicleId'] ?? null;
        $order = $data['order'];
        $sort = $data['sort'];

        $srTable = $em->getClassMetadata(ServiceRecord::class)->getTableName();
        $uTable = $em->getClassMetadata(User::class)->getTableName();
        $rTable = $em->getClassMetadata(Reminder::class)->getTableName();
        $rdTable = $em->getClassMetadata(RepairData::class)->getTableName();
        $vTable = $em->getClassMetadata(Vehicle::class)->getTableName();
        $vgTable = $em->getClassMetadata(VehicleGroup::class)->getTableName();
        $depotTable = $em->getClassMetadata(Depot::class)->getTableName();
        $rcCategoryTable = $em->getClassMetadata(ReminderCategory::class)->getTableName();

        $remindersSubQuery = $em->getConnection()->createQueryBuilder()
            ->select(
                'vehicle_id, to_char(sr.date, \'YYYY-MM-DD"T"HH24:MI:SS"+00:00"\') as sr_date, sr.cost as sr_amount,
                sr.note as sr_note, r.category_id as r_category_id, rc.name as r_category,
                CONCAT(u.name, \' \', u.surname) as created_by_name'
            )
            ->from($srTable, 'sr')
            ->innerJoin('sr', $rTable, 'r', 'r.id = sr.reminder_id')
            ->leftJoin('sr', $uTable, 'u', 'u.id = sr.created_by')
            ->leftJoin('r', $rcCategoryTable, 'rc', 'rc.id = r.category_id')
            ->andWhere(
                $qb->expr()->andX(
                    $qb->expr()->between('sr.date', ':dateFrom', ':dateTo'),
                    $qb->expr()->neq('sr.status', ':draftStatus'),
                    $qb->expr()->neq('sr.status', ':deletedStatus')
                )
            );

        $repairSubQuery = $em->getConnection()->createQueryBuilder()
            ->select(
                'vehicle_id, to_char(sr.date, \'YYYY-MM-DD"T"HH24:MI:SS"+00:00"\') as sr_date, sr.cost as sr_amount,
                sr.note as sr_note, rd.reminder_category as r_category_id, rc.name as r_category,
                CONCAT(u.name, \' \', u.surname) as created_by_name'
            )
            ->from($srTable, 'sr')
            ->innerJoin('sr', $rdTable, 'rd', 'rd.id = sr.repair_data')
            ->leftJoin('sr', $uTable, 'u', 'u.id = sr.created_by')
            ->leftJoin('rd', $rcCategoryTable, 'rc', 'rc.id = rd.reminder_category')
            ->andWhere(
                $qb->expr()->andX(
                    $qb->expr()->between('sr.date', ':dateFrom', ':dateTo'),
                    $qb->expr()->neq('sr.status', ':draftStatus'),
                    $qb->expr()->neq('sr.status', ':deletedStatus')
                )
            );

        $groupsSubQuery = $em->getConnection()->createQueryBuilder()
            ->select('string_agg(vg.name, \', \') AS groups, vgs.vehicle_id')
            ->from('vehicles_groups', 'vgs')
            ->leftJoin('vgs', $vgTable, 'vg', 'vg.id =vgs.vehicle_group_id')
            ->groupBy('vgs.vehicle_id');

        $query = $this
            ->getEntityManager()
            ->getConnection()
            ->createQueryBuilder()
            ->from($vTable, 'v')
            ->leftJoin('v', $depotTable, 'depot', 'v.depot_id = depot.id')
            ->leftJoin(
                'v',
                sprintf('(%s)', $groupsSubQuery->getSQL()),
                'vgs',
                'vgs.vehicle_id = v.id'
            )
            ->setParameter('dateFrom', $dateFrom)
            ->setParameter('dateTo', $dateTo)
            ->setParameter('draftStatus', ServiceRecord::STATUS_DRAFT)
            ->setParameter('deletedStatus', ServiceRecord::STATUS_DELETED)
            ->setParameter('null', null)
            ->orderBy($sort, $order);

        if ($vehicleList) {
            $query->select('v.id, v.regno')
                ->groupBy('v.id, v.regno');
        } else {
            $query->select('v.defaultLabel, v.regNo, v.model, v.id as vehicle_id')
                ->addSelect('vgs.groups')
                ->addSelect('depot.name as depot_name, depot.id as depotId')
                ->addSelect('r_category')
                ->addSelect('sr_date, sr_amount, sr_note')
                ->addSelect('(SUM (sr_amount) OVER ()) as sr_amount_total')
                ->addSelect('created_by_name');
        }

        switch ($type) {
            case ServiceRecord::TYPE_SERVICE_RECORD:
                $query->rightJoin(
                    'v',
                    sprintf('(%s)', $remindersSubQuery->getSQL()),
                    'r',
                    'r.vehicle_id = v.id'
                );
                break;
            case ServiceRecord::TYPE_REPAIR:
                $repairSubQuery->addSelect(['rd.title as repair_title']);
                $query->rightJoin(
                    'v',
                    sprintf('(%s)', $repairSubQuery->getSQL()),
                    'r',
                    'r.vehicle_id = v.id'
                );
                if (!$vehicleList) {
                    $query->addSelect(['repair_title']);
                }
                break;
            default:
                $remindersSubQuery->addSelect('r.title as title');
                $repairSubQuery->addSelect('rd.title as title');

                $remindersAndRepairsUnion = $em->getConnection()->createQueryBuilder()
                    ->select(
                        'vehicle_id, sr_date, sr_amount,
                sr_note, r_category_id, r_category, created_by_name'
                    )
                    ->from(
                        '(' . DoctrineHelper::unionQueryBuilders(
                            [$remindersSubQuery, $repairSubQuery],
                            DoctrineHelper::UNION_ALL
                        ) . ') as',
                        'records'
                    );
                $remindersAndRepairsUnion->addSelect(['title']);

                $query->rightJoin(
                    'v',
                    sprintf('(%s)', $remindersAndRepairsUnion->getSQL()),
                    'r',
                    'r.vehicle_id = v.id'
                );
                if (!$vehicleList) {
                    $query->addSelect(['r.title']);
                }
                break;
        }

        if ($vehicleDefaultLabel) {
            if (is_array($vehicleDefaultLabel)) {
                $q = [];
                foreach ($vehicleDefaultLabel as $index => $label) {
                    $q[] = $qb->expr()->like('LOWER(v.defaultLabel)', ":label$index");
                    $query->setParameter("label$index", strtolower($label).'%');
                }
                $query->andWhere(new Orx($q));
            } else {
                $query->andWhere('LOWER(v.defaultLabel) LIKE LOWER(:defaultLabel)')
                    ->setParameter('defaultLabel', $vehicleDefaultLabel . '%');
            }
        }

        if ($vehicleId) {
            $query->andWhere('v.id = :vehicleId')
                ->setParameter('vehicleId', $vehicleId)
                ->addSelect('(SUM (sr_amount) OVER ()) as sr_amount_total');
        }

        if ($vehicleRegNo) {
            $query->andWhere('LOWER(v.regNo) LIKE LOWER(:regNo)')
                ->setParameter('regNo', $vehicleRegNo . '%');
        }

        if ($repairTitle) {
            $query->andWhere('LOWER(repair_title) LIKE LOWER(:repairTitle)')
                ->setParameter('repairTitle', $repairTitle . '%');
        }

        if ($title) {
            $query->andWhere('LOWER(title) LIKE LOWER(:title)')
                ->setParameter('title', $title . '%');
        }

        if ($rCategoryId) {
            $query->andWhere('r_category_id = :rCategoryId')
                ->setParameter('rCategoryId', $rCategoryId);
        }

        if ($vehicleDepot) {
            $query->andWhere('depot_id = :depotId')
                ->setParameter('depotId', $vehicleDepot);
        }

        if ($vehicleIds) {
            $query->andWhere('v.id IN (' . implode(', ', $vehicleIds) . ')');
        }

        if ($vehicleGroup) {
            $query->setParameter('vehicleGroup', $vehicleGroup);

            $groupsFilterSubQuery = $em->getConnection()->createQueryBuilder()
                ->select('vgs.vehicle_id')
                ->from('vehicles_groups', 'vgs')
                ->leftJoin('vgs', $vgTable, 'vg', 'vg.id =vgs.vehicle_group_id')
                ->groupBy('vgs.vehicle_id')
                ->andWhere('vg.id IN (:vehicleGroup)');

            $query->rightJoin(
                'v',
                sprintf('(%s)', $groupsFilterSubQuery->getSQL()),
                'vgsf',
                'vgsf.vehicle_id = v.id'
            );
        }

        if ($teamId) {
            $query->andWhere('v.team_id IN (' . implode(', ', $teamId) . ')')->setParameter('teamId', $teamId);
        }

        return $query;
    }

    /**
     * @param $id
     * @param User $currentUser
     * @return mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getServiceRecordById($id, User $currentUser)
    {
        $qb = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('sr')
            ->from(ServiceRecord::class, 'sr')
            ->innerJoin('sr.repairData', 'rd')
            ->leftJoin('rd.vehicle', 'v')
            ->leftJoin('rd.asset', 'a')
            ->andWhere('sr.id = :serviceRecordId')
            ->setParameter('serviceRecordId', $id)
            ->setMaxResults(1);

        if ($currentUser->needToCheckUserGroup()) {
            $vehicleIds = $this->getEntityManager()->getRepository(UserGroup::class)->getUserVehiclesIdFromUserGroup(
                $currentUser
            );
            $qb->andWhere('v.id IN (:vehicleIds)')->setParameter('vehicleIds', $vehicleIds);
        }

        return $qb->getQuery()->getOneOrNullResult();
    }
}
