<?php

namespace App\Repository;

use App\Entity\Route;
use App\Entity\RouteTemp;
use Doctrine\Common\Collections\Criteria;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NonUniqueResultException;
use Doctrine\ORM\Query;

/**
 * RouteTempRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RouteTempRepository extends EntityRepository
{
    /**
     * @param int $deviceId
     * @param $startDate
     * @return RouteTemp|null
     * @throws NonUniqueResultException
     */
    public function getLastTempRouteStartedFromDate(int $deviceId, $startDate): ?RouteTemp
    {
        $result = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('rt')
            ->from(RouteTemp::class, 'rt')
            ->where('IDENTITY(rt.device) = :deviceId')
            ->andWhere('rt.startedAt < :startDate')
            ->setParameter('deviceId', $deviceId)
            ->setParameter('startDate', $startDate)
            ->orderBy('rt.startedAt', Criteria::DESC)
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();

        return $result ?? null;
    }

    /**
     * @param int $deviceId
     * @param $dateFrom
     * @param null $dateTo
     * @return mixed
     */
    public function getRouteTempForCalculate(int $deviceId, $dateFrom, $dateTo)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();

        $query = $qb->select('r')
            ->from(RouteTemp::class, 'r')
            ->where($qb->expr()->eq('IDENTITY(r.device)', $deviceId))
            ->andWhere(
                $qb->expr()->orX(
                    $qb->expr()->gte('r.startedAt', ':dateFrom'),
                    $qb->expr()->gte('r.finishedAt', ':dateFrom')
                )
            )->andWhere(
                $qb->expr()->orX(
                    $qb->expr()->lte('r.startedAt', ':dateTo'),
                    $qb->expr()->lte('r.finishedAt', ':dateTo')
                )
            )
            ->andWhere('r.startedAt IS NOT NULL')
            ->setParameter('dateFrom', $dateFrom)
            ->setParameter('dateTo', $dateTo)
            ->orderBy('r.startedAt', Criteria::ASC);

        return $query->getQuery()->execute();
    }

    /**
     * @param int $deviceId
     * @param $dateFrom
     * @param $type
     * @return \DateTime|null
     */
    public function getNewestSecondTempRouteTSWithTypeFromDate(int $deviceId, $dateFrom, $type): ?\DateTime
    {
        $qb = $this->getEntityManager()
            ->createQueryBuilder();

        $result = $qb->select('r.startedAt')
            ->from(RouteTemp::class, 'r')
            ->where($qb->expr()->eq('IDENTITY(r.device)', $deviceId))
            ->andWhere('r.type = :type')
            ->andWhere('r.startedAt > :dateFrom')
            ->setParameter('dateFrom', $dateFrom)
            ->setParameter('type', $type)
            ->orderBy('r.startedAt', Criteria::ASC)
            ->getQuery()
            ->setMaxResults(2)
            ->getResult();

        return isset($result[1]) ? $result[1]['startedAt'] : null;
    }

    /**
     * @param int $deviceId
     * @param $dateFrom
     * @param null $dateTo
     * @return int|null
     */
    public function removeNewestRoutesFromDate(int $deviceId, $dateFrom, $dateTo = null): ?int
    {
        $qb = $this->getEntityManager()->createQueryBuilder();

        $query = $qb->delete(RouteTemp::class, 'r')
            ->where($qb->expr()->eq('IDENTITY(r.device)', $deviceId))
            ->andWhere('r.startedAt >= :dateFrom')
            ->setParameter('dateFrom', $dateFrom);

        if ($dateTo) {
            $query->andWhere('r.startedAt < :dateTo')
                ->setParameter('dateTo', $dateTo);
        }

        return $query->getQuery()->execute();
    }

    /**
     * @param int $deviceId
     * @return int|null
     */
    public function removeAllByDeviceId(int $deviceId): ?int
    {
        $qb = $this->getEntityManager()
            ->createQueryBuilder();

        return $qb->delete(RouteTemp::class, 'rt')
            ->where($qb->expr()->eq('IDENTITY(rt.device)', $deviceId))
            ->getQuery()
            ->execute();
    }

    /**
     * @param int $deviceId
     * @param $dateFrom
     * @param $dateTo
     * @return Query
     */
    public function getAllByDeviceIdQuery(int $deviceId, $dateFrom, $dateTo): Query
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $query = $qb->select('rt')
            ->from(RouteTemp::class, 'rt')
            ->where($qb->expr()->eq('IDENTITY(rt.device)', $deviceId))
            ->andWhere('rt.startedAt >= :dateFrom')
            ->setParameter('dateFrom', $dateFrom)
            ->orderBy('rt.startedAt', Criteria::ASC);

        if ($dateTo) {
            $query->andWhere('rt.startedAt <= :dateTo')
                ->setParameter('dateTo', $dateTo);
        };

        return $query->getQuery();
    }

    /**
     * @param RouteTemp $routeTemp
     * @return RouteTemp|null
     * @throws NonUniqueResultException
     */
    public function getPreviousRouteTemp(RouteTemp $routeTemp): ?RouteTemp
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('rt')
            ->from(RouteTemp::class, 'rt')
            ->andWhere('rt.finishedAt = :startDate')
            ->andWhere('rt.device = :device')
            ->setParameter('startDate', $routeTemp->getStartedAt())
            ->setParameter('device', $routeTemp->getDevice())
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();
    }

    /**
     * @param Route $route
     * @param string $type
     * @return int
     * @throws NonUniqueResultException
     * @throws \Doctrine\ORM\NoResultException
     */
    public function getDurationByRouteAndTypeQuery(Route $route, string $type): int
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $query = $qb->select('SUM(rt.duration) AS sum_duration')
            ->from(RouteTemp::class, 'rt')
            ->where('rt.device = :device')
            ->andWhere(
                $qb->expr()->andX(
                    $qb->expr()->gte('rt.startedAt', ':dateFrom'),
                    $qb->expr()->lte('rt.finishedAt', ':dateTo')
                )
            )
            ->andWhere('rt.type = :type')
            ->setParameter('device', $route->getDevice())
            ->setParameter('dateFrom', $route->getStartedAt())
            ->setParameter('dateTo', $route->getFinishedAt())
            ->setParameter('type', $type);

        if ($route->getVehicle()) {
            $query->andWhere('rt.vehicle = :vehicle')
                ->setParameter('vehicle', $route->getVehicle());
        }

        $result = $query->getQuery()->getSingleScalarResult();

        return $result ?: 0;
    }
}
