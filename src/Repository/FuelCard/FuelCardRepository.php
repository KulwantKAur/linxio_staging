<?php

namespace App\Repository\FuelCard;

use App\Entity\FuelCard\FuelCard;
use App\Entity\FuelCard\FuelCardTemporary;
use App\Entity\Route;
use App\Entity\Vehicle;
use App\Entity\VehicleGroup;
use Doctrine\Common\Collections\Criteria;
use Doctrine\DBAL\Types\Type;
use Doctrine\DBAL\Types\Types;
use Doctrine\ORM\NonUniqueResultException;
use Doctrine\ORM\NoResultException;

/**
 * FuelCardRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FuelCardRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param $email
     * @return mixed
     */
    public function deleteUploadedFile($id)
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->delete(FuelCard::class, 'fl')
            ->leftJoin(FuelCardTemporary::class, 'fl_t', 'WITH', 'fl_t.id = fl.fuelCardTemporary')
            ->where('fl.status = :status')
            ->where('fl.file = :id')
            ->setParameter('id', $id)
            ->getQuery()
            ->execute();
    }

    /**
     * @return mixed
     * @throws \Exception
     */
    public function deleteExpiredFiles()
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->delete(FuelCard::class, 'fl')
            ->leftJoin(FuelCardTemporary::class, 'fl_t', 'WITH', 'fl_t.id = fl.fuelCardTemporary')
            ->where('fl.status = :status')
            ->andWhere('fl.createdAt < :now')
            ->setParameter('status', FuelCard::STATUS_DRAFT, Types::STRING)
            ->setParameter('now', new \DateTime())
            ->getQuery()
            ->execute();
    }

    /**
     * @param $id
     * @param bool $iterate
     * @return \Doctrine\ORM\Internal\Hydration\IterableResult|mixed
     */
    public function getDraftFilesRecords($id, bool $iterate = false)
    {
        $qb = $this->createQueryBuilder('fl');

        $q = $qb
            ->select('fl')
            ->leftJoin(FuelCardTemporary::class, 'fl_t', 'WITH', 'fl_t.id = fl.fuelCardTemporary')
            ->where(
                $qb->expr()->andX(
                    $qb->expr()->eq('fl.status', ':status'),
                    $qb->expr()->eq('fl.file', ':id')
                )
            )
            ->setParameter('status', FuelCard::STATUS_DRAFT, Types::STRING)
            ->setParameter('id', $id, Types::INTEGER)
            ->getQuery();

        if ($iterate) {
            return $q->toIterable();
        }

        return $q->getResult();
    }


    /**
     * @param $data
     * @return mixed
     * @throws \Exception
     */
    public function checkDuplicate($data)
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('fl')
            ->from(FuelCard::class, 'fl')
            ->leftJoin(FuelCardTemporary::class, 'fl_t', 'WITH', 'fl_t.id = fl.fuelCardTemporary')
            ->where('fl_t.vehicleOriginal = :vehicle')
            ->andWhere('fl.transactionDate = :date')
            ->andWhere(' fl.refueled = :refueled')
            ->andWhere(' fl.status = :status')
            ->setParameter('vehicle', $data['vehicleOriginal'], Types::STRING)
            ->setParameter('date', (new \DateTime($data['transactionDate']))->format('Y-m-d H:i:s'))
            ->setParameter('refueled', $data['refueled'], Types::FLOAT)
            ->setParameter('status', FuelCard::STATUS_ACTIVE, Types::STRING)
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();
    }

    /**
     * @param array $data
     * @return mixed
     */
    public function getQueryDataForFuelSummary(array $data)
    {
        $em = $this->getEntityManager();

        $startDate = $data['startDate'];
        $endDate = $data['endDate'];
        $vehicleRegNo = $data['vehicleRegNo'];
        $vehicleDepot = $data['vehicleDepot'];
        $vehicleGroups = $data['vehicleGroups'];
        $total = $data['total'];
        $refueled = $data['refueled'];
        $teamId = $data['teamId'];
        $sort = ltrim($data['sort'], ' -');
        $order = strpos($data['sort'], '-') === 0 ? Criteria::DESC : Criteria::ASC;

        $flTable = $em->getClassMetadata(FuelCard::class)->getTableName();
        $rTable = $em->getClassMetadata(Route::class)->getTableName();
        $vTable = $em->getClassMetadata(Vehicle::class)->getTableName();
        $vgTable = $em->getClassMetadata(VehicleGroup::class)->getTableName();
        $groupsSubQuery = $em->getConnection()->createQueryBuilder();
        $distanceSubQuery = $em->getConnection()->createQueryBuilder();

        $groupsSubQuery
            ->select('string_agg(vg.name, \', \') AS groups, vgs.vehicle_id')
            ->from('vehicles_groups', 'vgs')
            ->leftJoin('vgs', $vgTable, 'vg', 'vg.id =vgs.vehicle_group_id')
            ->groupBy('vgs.vehicle_id');

        $distanceSubQuery
            ->select('ROUND(SUM(r.distance) / 1000, 2) as distance, r.vehicle_id')
            ->from($rTable, 'r')
            ->leftJoin('r', $vTable, 'v', 'v.id =r.vehicle_id')
            ->andWhere(
                $distanceSubQuery->expr()->and(
                    $distanceSubQuery->expr()->lte('r.started_at', ':endDate'),
                    $distanceSubQuery->expr()->gte('r.finished_at', ':startDate')
                )
            )
            ->andWhere('r.type = :type')
            ->groupBy('r.vehicle_id');

        if ($teamId) {
            $distanceSubQuery->andWhere('v.team_id IN (:teamId)')
                ->setParameter('teamId', implode(', ', $teamId));
        }

        $qb = $this->getEntityManager()->createQueryBuilder();
        $query = $this
            ->getEntityManager()
            ->getConnection()
            ->createQueryBuilder()
            ->select('DISTINCT(fl.vehicle_id) AS vehicle_id,
                        v.regNo AS reg_no,
                        v_d.name AS depot,
                        vgs.groups,
                        SUM(dis.distance) as mileage,
                        ROUND(CAST(SUM(fl.refueled) as numeric), 2) AS refueled,
                        ROUND(CAST(SUM(fl.total) as numeric), 2) AS total')
            ->from($flTable, 'fl')
            ->leftJoin('fl', $vTable, 'v', 'fl.vehicle_id = v.id')
            ->leftJoin('v', 'vehicle_depot', 'v_d', 'v_d.id = v.depot_id')
            ->leftJoin(
                'v',
                sprintf('(%s)', $groupsSubQuery->getSQL()),
                'vgs',
                'vgs.vehicle_id = v.id'
            )
            ->leftJoin(
                'v',
                sprintf('(%s)', $distanceSubQuery->getSQL()),
                'dis',
                'dis.vehicle_id = v.id'
            )
            ->where(
                $qb->expr()->andX(
                    $qb->expr()->between('fl.transaction_date', ':startDate', ':endDate')
                )
            )
            ->andWhere(' fl.status = :status')
            ->setParameter('startDate', $startDate)
            ->setParameter('endDate', $endDate)
            ->setParameter('status', FuelCard::STATUS_ACTIVE, Types::STRING)
            ->setParameter('type', Route::TYPE_DRIVING)
            ->orderBy($sort, $order)
            ->groupBy('fl.vehicle_id')
            ->addGroupBy('v.regNo')
            ->addGroupBy(' vgs.groups')
            ->addGroupBy('v_d.name');

        if ($vehicleRegNo) {
            $query->andWhere('LOWER(v.regNo) LIKE LOWER(:regNo)')
                ->setParameter('regNo', $vehicleRegNo . '%');
        }

        if ($vehicleDepot) {
            $query->andWhere('depot_id = :depotId')
                ->setParameter('depotId', $vehicleDepot);
        }

        if ($vehicleGroups) {
            $query->setParameter('vehicleGroup', $vehicleGroups);

            $groupsFilterSubQuery = $em->getConnection()->createQueryBuilder()
                ->select('vgs.vehicle_id')
                ->from('vehicles_groups', 'vgs')
                ->leftJoin('vgs', $vgTable, 'vg', 'vg.id =vgs.vehicle_group_id')
                ->groupBy('vgs.vehicle_id')
                ->andWhere('vg.id IN (:vehicleGroup)');

            $query->rightJoin(
                'v',
                sprintf('(%s)', $groupsFilterSubQuery->getSQL()),
                'vgsf',
                'vgsf.vehicle_id = v.id'
            );
        }

        if ($total) {
            if ($total['lt'] ?? null) {
                $query->andHaving(
                    $query->expr()->andX(
                        $query->expr()->gte('SUM(fl.total)', ':totalGte'),
                        $query->expr()->lt('SUM(fl.total)', ':totalLt')
                    )
                )
                    ->setParameter('totalGte', $total['gte'])
                    ->setParameter('totalLt', $total['lt']);
            } else {
                $query->andHaving(
                    $query->expr()->gte('SUM(fl.total)', ':totalGte')
                )
                    ->setParameter('totalGte', $total['gte']);
            }

        }

        if ($refueled) {
            if ($refueled['lt'] ?? null) {
                $query->andHaving(
                    $query->expr()->andX(
                        $query->expr()->gte('SUM(fl.refueled)', ':refueledGte'),
                        $query->expr()->lt('SUM(fl.refueled)', ':refueledLt')
                    )
                )
                    ->setParameter('refueledGte', $refueled['gte'])
                    ->setParameter('refueledLt', $refueled['lt']);
            } else {
                $query->andHaving(
                    $query->expr()->gte('SUM(fl.refueled)', ':refueledGte')
                )
                    ->setParameter('refueledGte', $refueled['gte']);
            }

        }

        if ($teamId) {
            $query->andWhere('v.team_id IN (:teamId)')
                ->setParameter('teamId', implode(', ', $teamId));
        }

        return $query;
    }

    /**
     * @throws NonUniqueResultException
     * @throws NoResultException
     */
    public function checkAdditionalFields($teamId): bool
    {
        $qb = $this->getEntityManager()->createQueryBuilder();

        $query = $qb
            ->select('COUNT(fl) as count')
            ->from(FuelCard::class, 'fl')
            ->where('fl.teamId = :teamId')
            ->andWhere(
                $qb->expr()->orX(
                    $qb->expr()->isNotNull('fl.odometer'),
                    $qb->expr()->isNotNull('fl.cardAccountNumber'),
                    $qb->expr()->isNotNull('fl.pumpPrice'),
                )
            )
            ->setParameter('teamId', $teamId);

        return (bool)$query->getQuery()->getSingleScalarResult();
    }
}
