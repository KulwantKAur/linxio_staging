<?php

namespace App\Repository\EventLog;

use App\Entity\EventLog\EventLog;
use App\Entity\Notification\Event;
use Doctrine\Common\Collections\Criteria;

/**
 * EventLogRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EventLogRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param string $json
     * @param $eventId
     * @param \DateTime $date
     * @return mixed[]
     * @throws \Doctrine\DBAL\DBALException
     */
    public function findEventLogDetailsJson(string $json, $eventId, \DateTime $date)
    {
        $eTable = $this->getEntityManager()->getClassMetadata(EventLog::class)->getTableName();
        $sql = "SELECT e.id FROM $eTable e WHERE e.event_id = :eventId AND e.created_at > :date AND details $json";
        $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
        $stmt->bindValue("date", $date->format('c'));
        $stmt->bindValue("eventId", $eventId);

        return $stmt->executeQuery()->fetchAllAssociative();
    }

    public function findEventLogByDetailsJson(string $json, $eventId)
    {
        $eTable = $this->getEntityManager()->getClassMetadata(EventLog::class)->getTableName();
        $sql = "SELECT e.id FROM $eTable e WHERE e.event_id = :eventId AND details $json";
        $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
        $stmt->bindValue("eventId", $eventId);

        return $stmt->executeQuery()->fetchAllAssociative();
    }

    /**
     * @param string $json
     * @param $eventId
     * @param \DateTime $date
     * @return mixed[]
     * @throws \Doctrine\DBAL\DBALException
     */
    public function findEventLogDetailsJsonByEventDate(string $json, $eventId, \DateTime $date)
    {
        $eTable = $this->getEntityManager()->getClassMetadata(EventLog::class)->getTableName();
        $sql = "SELECT e.id FROM $eTable e WHERE e.event_id = :eventId AND e.event_date > :date AND details $json";
        $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
        $stmt->bindValue("date", $date->format('c'));
        $stmt->bindValue("eventId", $eventId);

        return $stmt->executeQuery()->fetchAllAssociative();
    }

    /**
     * @param Event $event
     * @param $detailId
     * @param \DateTime|null $createdAt
     * @return int|mixed|string
     */
    public function findEventLogByDetailId(Event $event, $detailId, ?\DateTime $createdAt = null)
    {
        $q = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('el.id as id')
            ->from(EventLog::class, 'el')
            ->where('el.event = :event')
            ->andWhere('el.entityId = :detailId')
            ->setParameter('event', $event)
            ->setParameter('detailId', $detailId)
            ->orderBy('el.id', Criteria::DESC);

        if ($createdAt) {
            $q->andWhere('el.createdAt > :createdAt')
                ->setParameter('createdAt', $createdAt);
        }

        $result = $q->getQuery()->getResult();

        return $result ? array_column($result, 'id') : [];
    }

    /**
     * @param Event $event
     * @param $vehicleId
     * @param \DateTime|null $createdAt
     * @return int|mixed|string
     */
    public function findEventLogByVehicleId(Event $event, $vehicleId, ?\DateTime $createdAt = null)
    {
        $q = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('el.id as id')
            ->from(EventLog::class, 'el')
            ->where('el.event = :event')
            ->andWhere('el.vehicleId = :vehicleId')
            ->setParameter('event', $event)
            ->setParameter('vehicleId', $vehicleId)
            ->orderBy('el.id', Criteria::DESC);

        if ($createdAt) {
            $q->andWhere('el.createdAt > :createdAt')
                ->setParameter('createdAt', $createdAt);
        }

        $result = $q->getQuery()->getResult();

        return $result ? array_column($result, 'id') : [];
    }

    public function getEventLogByEventIterator(Event $event)
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('el')
            ->from(EventLog::class, 'el')
            ->where('el.event = :event')
            ->setParameter('event', $event)
            ->getQuery()
            ->toIterable();
    }

    /**
     * @param Criteria $criteria
     * @return \Doctrine\ORM\Query
     * @throws \Doctrine\ORM\Query\QueryException
     */
    public function findByCriteria(Criteria $criteria)
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('el')
            ->from(EventLog::class, 'el')
            ->addCriteria($criteria)
            ->getQuery()
            ;
    }

    public function getLastEventLogByDetailsId(Event $event, $detailId)
    {
        $q = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('el')
            ->from(EventLog::class, 'el')
            ->where('el.event = :event')
            ->andWhere('el.entityId = :detailId')
            ->setParameter('event', $event)
            ->setParameter('detailId', $detailId)
            ->orderBy('el.id', Criteria::DESC)
            ->setMaxResults(1);

        return $q->getQuery()->getOneOrNullResult();
    }

    /**
     * @param Event $event
     * @param $vehicleId
     * @param \DateTime $eventDate
     * @return int|mixed|string
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findEventLogByEventAndVehicleIdAndEventDate(Event $event, $vehicleId, \DateTime $eventDate)
    {
        return  $this->getEntityManager()
            ->createQueryBuilder()
            ->select('el')
            ->from(EventLog::class, 'el')
            ->where('el.event = :event')
            ->andWhere('el.vehicleId = :vehicleId')
            ->andWhere('el.eventDate = :eventDate')
            ->setParameter('event', $event)
            ->setParameter('vehicleId', $vehicleId)
            ->setParameter('eventDate', $eventDate)
            ->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult();
    }
}
