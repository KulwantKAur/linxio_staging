<?php

declare(strict_types = 1);

namespace App\Repository;

use App\Entity\DigitalForm;
use App\Entity\DigitalFormAnswer;
use App\Entity\DigitalFormSchedule;
use App\Entity\DriverHistory;
use App\Entity\Team;
use App\Entity\User;
use Doctrine\ORM\Query\Expr;

/**
 * DigitalFormRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DigitalFormRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @return DigitalForm[]
     */
    public function getActiveForms(Team $team): array
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('df')
            ->from(DigitalForm::class, 'df')
            ->andWhere('df.active = :active')
            ->andWhere('df.status = :status')
            ->andWhere('df.team = :team')
            ->setParameter('active', true)
            ->setParameter('status', DigitalForm::STATUS_ACTIVE)
            ->setParameter('team', $team)
            ->getQuery()
            ->getResult();
    }

    /**
     * @return DigitalForm[]
     */
    public function getFormsByTeam(Team $team): array
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('df')
            ->from(DigitalForm::class, 'df')
            ->andWhere('df.team = :team')
            ->setParameter('team', $team)
            ->getQuery()
            ->getResult();
    }

    /**
     * @param User $user
     * @param DateTime $dt
     * @param array|null $withInspectionPeriods inspection period value [
     *                   DigitalForm::INSPECTION_PERIOD_SHOW_ALWAYS,
     *                   DigitalForm::INSPECTION_PERIOD_EVERY_TIME,
     *                   DigitalForm::INSPECTION_PERIOD_ONCE_PER_DAY,
     *                   DigitalForm::INSPECTION_PERIOD_ONCE_PER_WEEK,
     *                   DigitalForm::INSPECTION_PERIOD_ONCE_PER_MONTH
     *                  ]
     *
     * @return array
     *
     * @throws \Exception
     */
    public function getNotAnsweredInspectionFormIds(
        User $user,
        \DateTime $dt,
        ?array $withInspectionPeriods = null
    ): array {
        $withInspectionPeriods = $withInspectionPeriods ?? [
                DigitalForm::INSPECTION_PERIOD_SHOW_ALWAYS,
                DigitalForm::INSPECTION_PERIOD_ONCE_PER_DAY,
                DigitalForm::INSPECTION_PERIOD_ONCE_PER_WEEK,
                DigitalForm::INSPECTION_PERIOD_ONCE_PER_MONTH
            ];

        $ids = [];
        foreach ($withInspectionPeriods as $inspectionPeriod) {
            $ids = array_merge($ids, $this->getNotAnsweredInspectionFormByPeriod($user, $inspectionPeriod, $dt));
        }

        return $ids;
    }

    /**
     * @param User $user
     * @param string $inspectionPeriod period value [
     *                   DigitalForm::INSPECTION_PERIOD_SHOW_ALWAYS,
     *                   DigitalForm::INSPECTION_PERIOD_EVERY_TIME,
     *                   DigitalForm::INSPECTION_PERIOD_ONCE_PER_DAY,
     *                   DigitalForm::INSPECTION_PERIOD_ONCE_PER_WEEK,
     *                   DigitalForm::INSPECTION_PERIOD_ONCE_PER_MONTH
     *                  ]
     *
     * @return array of digital form IDs
     * @return \DateTime $dt
     *
     * @throws \Exception
     */
    public function getNotAnsweredInspectionFormByPeriod(User $user, string $inspectionPeriod, \DateTime $dt): array
    {
        $vehicle = $user->getVehicle();
        $team = $user->getTeam();
        $em = $this->getEntityManager();

        switch ($inspectionPeriod) {
            case DigitalForm::INSPECTION_PERIOD_EVERY_TIME:
                $dfsSubCondition = '1=1';

                //detect interval for Every Time forms
                /** @var DriverHistory $prevDriverHistory */
                $prevDriverHistory = $em->getRepository(DriverHistory::class)
                    ->findLastHistoryByVehicle($vehicle);
                $everyTimeInterval = $prevDriverHistory
                    ? ($dt->getTimestamp() - $prevDriverHistory->getStartDate()->getTimestamp())
                    : 0;

                //get all answers that created in inspection period interval
                $dfaSubCondition = 'dfa.created_at > 
                    (:checkedDate::date - INTERVAL \'' . $everyTimeInterval . ' SECONDS\')';
                break;
            case DigitalForm::INSPECTION_PERIOD_SHOW_ALWAYS:
            case DigitalForm::INSPECTION_PERIOD_ONCE_PER_DAY:
                $dfsSubCondition = ':checkedDate::time BETWEEN dfs.time_from AND dfs.time_to';
                $dfaSubCondition = '((dfa.created_at)::timestamp AT TIME ZONE :tz)::date = :checkedDate::date';
                break;
            case DigitalForm::INSPECTION_PERIOD_ONCE_PER_WEEK:
                $dfsSubCondition = 'CAST(dfs.days AS text) LIKE :textDayName';
                $dfaSubCondition = '((dfa.created_at)::timestamp AT TIME ZONE :tz)::date
                    BETWEEN (date_trunc(\'week\', :checkedDate::date)::date - 1)
                    AND ((date_trunc(\'week\', :checkedDate::date) + \'6 days\'::interval)::date - 1)';
                break;
            case DigitalForm::INSPECTION_PERIOD_ONCE_PER_MONTH:
                $dfsSubCondition = '1=1';
                $dfaSubCondition = '(
                    (EXTRACT(MONTH FROM 
                        ((dfa.created_at)::timestamp AT TIME ZONE :tz)) = (EXTRACT(MONTH FROM :checkedDate::date) - 1)
                            AND EXTRACT(DAY FROM :checkedDate::date) < dfs.day_of_month
                            AND (EXTRACT(DAY FROM ((dfa.created_at)::timestamp AT TIME ZONE :tz))) >= dfs.day_of_month
                    )
                    OR
                    (EXTRACT(MONTH FROM 
                        ((dfa.created_at)::timestamp AT TIME ZONE :tz)) = EXTRACT(MONTH FROM :checkedDate::date)
                            AND (
                                (EXTRACT(DAY FROM :checkedDate::date) < dfs.day_of_month
                                    AND (EXTRACT(DAY FROM ((dfa.created_at)::timestamp AT TIME ZONE :tz))) < dfs.day_of_month
                                )
                                OR 
                                (EXTRACT(DAY FROM :checkedDate::date) >= dfs.day_of_month
                                    AND (EXTRACT(DAY FROM ((dfa.created_at)::timestamp AT TIME ZONE :tz))) >= dfs.day_of_month
                                )
                            )    
                    )
                )';
                break;
            default:
                throw new \Exception('Unknown form period: ' . $inspectionPeriod);
        }

        //all user answers in inspection period for current car
        $dfaLeftJoinCondition = "df.id = dfa.digital_form_id
            AND (dfa.user_id = :user)
            AND (dfa.vehicle_id = :vehicle)
            AND {$dfaSubCondition}";

        $dfsLeftJoinCondition = "df.id = dfs.digital_form_id
            AND {$dfsSubCondition}";

        $dfTable = $em->getClassMetadata(DigitalForm::class)->getTableName();
        $dfaTable = $em->getClassMetadata(DigitalFormAnswer::class)->getTableName();
        $dfsTable = $em->getClassMetadata(DigitalFormSchedule::class)->getTableName();

        //all forms without answers
        $qb = $em->getConnection()
            ->createQueryBuilder()
            ->select('df.id, df.inspection_period, COUNT(dfa.id) AS counter')
            ->from($dfTable, 'df')
            ->leftJoin('df', $dfsTable, 'dfs', $dfsLeftJoinCondition)
            ->leftJoin('df', $dfaTable, 'dfa', $dfaLeftJoinCondition)
            ->andWhere('df.active = :active')
            ->andWhere('df.status = :status')
            ->andWhere('df.type = :type')
            ->andWhere('df.team_id = :team')
            ->andWhere('df.inspection_period = :inspection_period')
            ->andWhere('dfs.id IS NOT NULL')
            ->groupBy('df.id')
            ->setParameter('active', true)
            ->setParameter('status', DigitalForm::STATUS_ACTIVE)
            ->setParameter('type', DigitalForm::TYPE_INSPECTION)
            ->setParameter('team', $team->getId())
            ->setParameter('inspection_period', $inspectionPeriod)
            ->setParameter('user', $user->getId())
            ->setParameter('tz', $dt->format('P'))
            ->setParameter('checkedDate', $dt->format('Y-m-d H:i:s'))
            ->setParameter('textDayName', '%' . strtolower($dt->format('l')) . '%')
            ->setParameter('vehicle', $vehicle->getId());

        if ($inspectionPeriod !== DigitalForm::INSPECTION_PERIOD_SHOW_ALWAYS) {
            //exclude all forms with actual answers, except - type 'show always'
            $qb->andWhere('dfa.id IS NULL');
        }

        return $qb->execute()->fetchAll(\PDO::FETCH_COLUMN);
    }

    public function getById(int $id, Team $team): ?DigitalForm
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('df')
            ->from(DigitalForm::class, 'df')
            ->andWhere('df.id = :id')
            ->andWhere('df.team = :team')
            ->setParameter('id', $id)
            ->setParameter('team', $team)
            ->getQuery()
            ->getOneOrNullResult();
    }


    /**
     * @param User $user
     * @param \DateTime $dateFrom
     * @param string $type
     * @param string|null $inspectionPeriod
     *
     * @return DigitalForm|null
     *
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getLastAnsweredForm(
        User $user,
        \DateTime $dateFrom,
        string $type,
        ?string $inspectionPeriod = null
    ): ?DigitalForm
    {
        $vehicle = $user->getVehicle();

        $result = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('df')
            ->from(DigitalForm::class, 'df')
            ->leftJoin(DigitalFormAnswer::class, 'dfa', Expr\Join::WITH, 'dfa.digitalForm = df')
            ->andWhere('dfa.vehicle = :vehicle')
            ->andWhere('dfa.createdAt > :dateFrom')
            ->andWhere('df.type = :type')
            ->orderBy('dfa.createdAt', 'DESC')
            ->setMaxResults(1)
            ->setParameter('vehicle', $vehicle)
            ->setParameter('dateFrom', $dateFrom)
            ->setParameter('type', $type);

        if ($user) {
            $result
                ->andWhere('dfa.user = :user')
                ->setParameter('user', $user);
        }

        if ($inspectionPeriod) {
            $result->andWhere('df.inspectionPeriod = :inspectionPeriod')
                ->setParameter('inspectionPeriod', $inspectionPeriod);
        }

        return $result->getQuery()->getOneOrNullResult();
    }
}
