<?php

namespace App\Repository;

use App\Entity\Device;
use App\Entity\Idling;
use App\Entity\Route;
use App\Entity\Tracker\TrackerHistory;
use App\Util\ArrayHelper;
use App\Entity\Vehicle;
use Doctrine\Common\Collections\Criteria;
use Doctrine\ORM\Query;

/**
 * IdlingRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class IdlingRepository extends \Doctrine\ORM\EntityRepository
{

    /**
     * @param int $deviceId
     * @param $startDate
     * @return Idling|null
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getLastIdlingStartedFromDate(int $deviceId, $startDate): ?Idling
    {
        $qb = $this->getEntityManager()->createQueryBuilder();

        return $qb->select('i')
            ->from(Idling::class, 'i')
            ->where($qb->expr()->eq('IDENTITY(i.device)', $deviceId))
            ->andWhere('i.finishedAt <= :startDate OR i.startedAt < :startDate')
            ->setParameter('startDate', $startDate)
            ->orderBy('i.startedAt', Criteria::DESC)
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();
    }

    /**
     * @param int $deviceId
     * @param $dateFrom
     * @param $dateTo
     * @return int|null
     */
    public function removeNewestIdlingFromDate(int $deviceId, $dateFrom, $dateTo = null): ?int
    {
        $qb = $this->getEntityManager()->createQueryBuilder();

        $query = $qb->delete(Idling::class, 'i')
            ->where($qb->expr()->eq('IDENTITY(i.device)', $deviceId))
            ->andWhere('i.startedAt >= :dateFrom')
            ->setParameter('dateFrom', $dateFrom);

        if ($dateTo) {
            $query->andWhere('i.startedAt < :dateTo')
                ->setParameter('dateTo', $dateTo);
        }

        return $query->getQuery()->execute();
    }

    /**
     * @param int $deviceId
     * @param $dateFrom
     * @return \DateTime|null
     */
    public function getNewestSecondIdlingTSWithTypeFromDate(int $deviceId, $dateFrom): ?\DateTime
    {
        $qb = $this->getEntityManager()->createQueryBuilder();

        $result = $qb->select('i.startedAt')
            ->from(Idling::class, 'i')
            ->where($qb->expr()->eq('IDENTITY(i.device)', $deviceId))
            ->andWhere('i.startedAt > :dateFrom')
            ->setParameter('dateFrom', $dateFrom)
            ->orderBy('i.startedAt', Criteria::ASC)
            ->getQuery()
            ->setMaxResults(2)
            ->getResult();

        return isset($result[1]) ? $result[1]['startedAt'] : null;
    }

    /**
     * @param int $vehicleId
     * @return \DateTime|null
     */
    public function getVehicleIdling(int $vehicleId): ?array
    {
        $qb = $this->getEntityManager()->createQueryBuilder();

        return $qb->select('i')
            ->from(Idling::class, 'i')
            ->where($qb->expr()->eq('IDENTITY(i.vehicle)', $vehicleId))
            ->orderBy('i.startedAt', Criteria::ASC)
            ->getQuery()
            ->getResult();
    }

    /**
     * @param array $params
     *
     * @return array
     */
    public function getIdlingByDriver(array $params): array
    {
        $connection = $this->getEntityManager()->getConnection();
        $qb = $connection->createQueryBuilder();
        $qb->select(
            [
                'i.id',
                'EXTRACT(EPOCH FROM (i.finished_at - i.started_at))::INT as duration',
                'i.address',
                'i.started_at as start_date',
                'i.finished_at as end_date',
                'STRING_AGG(th.lat || \' \' || th.lng, \', \' order by th.ts DESC) as coordinates',
            ]
        )
            ->from($this->getEntityManager()->getClassMetadata(Idling::class)->getTableName(), 'i')
            ->leftJoin(
                'i',
                $this->getEntityManager()->getClassMetadata(TrackerHistory::class)->getTableName(),
                'th',
                'i.driver_id=th.driver_id AND th.ts BETWEEN i.started_at AND i.finished_at'
            )
            ->where($qb->expr()->eq('i.driver_id', ':driverId'))
            ->andWhere($qb->expr()->gte('i.duration', ':excessiveIdling'))
            ->andWhere(
                $qb->expr()->andX(
                    $qb->expr()->gte('i.started_at', ':dateFrom'),
                    $qb->expr()->lte('i.finished_at', ':dateTo')
                )
            )
            ->groupBy('i.id')
            ->setParameter('driverId', $params['driverId'])
            ->setParameter('dateFrom', $params['startDate'])
            ->setParameter('dateTo', $params['endDate'])
            ->setParameter('excessiveIdling', $params['excessiveIdling']);

        $result = $qb->execute()->fetchAll();

        return ArrayHelper::keysToCamelCase($result);
    }

    /**
     * @param Vehicle $vehicle
     * @param \DateTime $startedAt
     *
     * @return Query
     */
    public function getIdlingByVehicleAndStartedDateQb(Vehicle $vehicle, \DateTime $startedAt): Query
    {
        $qb = $this->getEntityManager()->createQueryBuilder();

        return $qb->select('i')
            ->from(Idling::class, 'i')
            ->where($qb->expr()->eq('IDENTITY(i.vehicle)', ':vehicle'))
            ->andWhere($qb->expr()->gte('i.startedAt', ':startedAt'))
            ->setParameter('vehicle', $vehicle)
            ->setParameter('startedAt', $startedAt)
            ->getQuery();
    }

    /**
     * @param Device $device
     * @param $dateFrom
     * @param $dateTo
     * @param $duration
     * @return mixed
     */
    public function getIdlingByDeviceAndDateAndDuration(Device $device, $dateFrom, $dateTo, $duration = null)
    {
        $qb = $this->getEntityManager()
            ->createQueryBuilder();

        $qb = $qb->select('i')
            ->from(Idling::class, 'i')
            ->where('i.device = :device')
            ->andWhere(
                $qb->expr()->orX(
                    $qb->expr()->between('i.startedAt', ':dateFrom', ':dateTo'),
                    $qb->expr()->between('i.finishedAt', ':dateFrom', ':dateTo')
                )
            )->setParameter('device', $device)
            ->setParameter('dateFrom', $dateFrom)
            ->setParameter('dateTo', $dateTo);

        if ($duration) {
            $qb->andWhere('i.duration > :duration')
                ->setParameter('duration', $duration);
        }

        return $qb->getQuery()->getResult();
    }

    /**
     * @param Vehicle $vehicle
     * @param $dateFrom
     * @param $dateTo
     * @return int|mixed|string
     */
    public function getDurationByDateAndVehicle(Vehicle $vehicle, $dateFrom, $dateTo)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();

        $result = $qb->select('sum(i.duration) as duration')
            ->from(Idling::class, 'i')
            ->where('i.vehicle = :vehicle')
            ->andWhere(
                $qb->expr()->andX(
                    $qb->expr()->lte('i.startedAt', ':dateTo'),
                    $qb->expr()->gte('i.finishedAt', ':dateFrom')
                )
            )
            ->setParameter('vehicle', $vehicle)
            ->setParameter('dateFrom', $dateFrom)
            ->setParameter('dateTo', $dateTo)
            ->getQuery()
            ->getResult();

        return $result[0]['duration'];
    }

    public function getDurationByDateAndDevice(Device $device, $dateFrom, $dateTo)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();

        $result = $qb->select('sum(i.duration) as duration')
            ->from(Idling::class, 'i')
            ->where('i.device = :device')
            ->andWhere(
                $qb->expr()->andX(
                    $qb->expr()->lte('i.startedAt', ':dateTo'),
                    $qb->expr()->gte('i.finishedAt', ':dateFrom')
                )
            )
            ->setParameter('device', $device)
            ->setParameter('dateFrom', $dateFrom)
            ->setParameter('dateTo', $dateTo)
            ->getQuery()
            ->getResult();

        return $result[0]['duration'];
    }

    /**
     * @param Route $route
     * @return mixed
     */
    public function getQueryIdlingsByRoute(Route $route)
    {
        $qb = $this->getEntityManager()
            ->createQueryBuilder();

        return $qb->select('i')
            ->from(Idling::class, 'i')
            ->where('i.device = :device')
            ->andWhere('i.vehicle = :vehicle')
            ->andWhere(
                $qb->expr()->andX(
                    $qb->expr()->gte('i.startedAt', ':dateFrom'),
                    $qb->expr()->lte('i.finishedAt', ':dateTo')
                )
            )
            ->setParameter('device', $route->getDevice())
            ->setParameter('vehicle', $route->getVehicle())
            ->setParameter('dateFrom', $route->getStartedAt())
            ->setParameter('dateTo', $route->getFinishedAt())
            ->getQuery();
    }

    public function updateIdlingDriverByRoute(Route $route)
    {
        $query = $this->getEntityManager()
            ->createQueryBuilder()
            ->update(Idling::class, 'i')
            ->set('i.driver', ':driver')
            ->andWhere('i.device = :device')
            ->andWhere('i.startedAt >= :startedAt')
            ->andWhere('i.finishedAt <= :finishedAt')
            ->setParameter('driver', $route->getDriver())
            ->setParameter('device', $route->getDevice())
            ->setParameter('startedAt', $route->getStartedAt())
            ->setParameter('finishedAt', $route->getFinishedAt());

        $query->getQuery()->execute();
    }
}
