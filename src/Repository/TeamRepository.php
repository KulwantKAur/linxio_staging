<?php

namespace App\Repository;

use App\Entity\Team;
use App\Entity\User;
use Doctrine\Common\Collections\Order;

/**
 * TeamRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TeamRepository extends \Doctrine\ORM\EntityRepository
{
    public function findByManager(User $manager)
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('t')
            ->from(Team::class, 't')
            ->leftJoin('t.client', 'c')
            ->orWhere('c.manager = :manager')
            ->orWhere('c.salesManager = :manager')
            ->setParameter('manager', $manager)
            ->getQuery()
            ->getResult();
    }

    public function findAdminTeam()
    {
        $team = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('t')
            ->from(Team::class, 't')
            ->where('t.type = :type')
            ->setParameter('type', Team::TEAM_ADMIN)
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();

        return $team;
    }
    
    public function findIDS(array $teamIDS)
    {
        $inStr = '';
        foreach ($teamIDS as $id) {
            $inStr .= (int)$id.',';
        }
        $inStr = rtrim($inStr, ',');

        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select("a")
            ->from(TEAM::class, "a")
            ->andWhere("a.id IN (".$inStr.")")
            ->getQuery()
            ->getResult()
        ;
    }

    public function getTeamIds(
        ?int $limit = null,
        ?string $orderBy = null,
        ?bool $asc = true,
        ?array $ids = null,
    ): array {
        $query = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('t.id')
            ->from(Team::class, 't');

        if ($orderBy) {
            $query->orderBy($orderBy, ($asc ? Order::Ascending->value : Order::Descending->value));
        }
        if ($limit) {
            $query->setMaxResults($limit);
        }
        if ($ids) {
            $query->andWhere('IDENTITY(t) IN (:ids)')
                ->setParameter('ids', $ids);
        }

        $result = $query->getQuery()->getResult();

        return $result ? array_column($result, 'id') : [];
    }
}
