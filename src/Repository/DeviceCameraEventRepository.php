<?php

namespace App\Repository;

use App\Entity\DeviceCameraEvent;
use App\Entity\DeviceVendor;
use App\Entity\Vehicle;
use Doctrine\ORM\Query;
use Doctrine\ORM\Query\Expr\Join;

/**
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DeviceCameraEventRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param string $remoteId
     * @param DeviceVendor $deviceVendor
     * @return DeviceCameraEvent|null
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getByRemoteIdAndDeviceVendor(string $remoteId, DeviceVendor $deviceVendor): ?DeviceCameraEvent
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('dce')
            ->from(DeviceCameraEvent::class, 'dce')
            ->where('dce.remoteId = :remoteId')
            ->andWhere('dce.deviceVendor = :deviceVendor')
            ->setParameter('deviceVendor', $deviceVendor)
            ->setParameter('remoteId', $remoteId)
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();
    }

    /**
     * @param \DateTimeInterface|string $dateFrom
     * @param \DateTimeInterface|string $dateTo
     * @param array $params
     * @param string $sort
     * @param string $order
     * @return Query
     */
    public function getAllByRangeQuery(
        $dateFrom,
        $dateTo,
        array $params,
        string $sort,
        string $order
    ): Query {
        $deviceId = $params['deviceId'] ?? null;
        $deviceIds = $params['deviceIds'] ?? null;
        $vehicleId = $params['vehicleId'] ?? null;
        $vehicleIds = $params['vehicleIds'] ?? null;
        $regNo = $params['regNo'] ?? null;
        $driverId = $params['driverId'] ?? null;
        $typeId = $params['typeId'] ?? null;
        $teamIds = $params['teamId'] ?? null;
        $query = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('dce')
            ->from(DeviceCameraEvent::class, 'dce')
            ->orderBy('dce.' . $sort, $order);

        if ($dateFrom) {
            $query->andWhere('dce.startedAt >= :dateFrom')
                ->setParameter('dateFrom', $dateFrom);
        }
        if ($dateTo) {
            $query->andWhere('dce.startedAt <= :dateTo')
                ->setParameter('dateTo', $dateTo);
        }
        if ($deviceId) {
            $query->andWhere('IDENTITY(dce.device) = :deviceId')
                ->setParameter('deviceId', $deviceId);
        }
        if ($deviceIds) {
            $query->andWhere('IDENTITY(dce.device) IN (:deviceIds)')
                ->setParameter('deviceIds', $deviceIds);
        }
        if ($driverId) {
            $query->andWhere('IDENTITY(dce.driver) = :driverId')
                ->setParameter('driverId', $driverId);
        }
        if ($vehicleId) {
            $query->andWhere('IDENTITY(dce.vehicle) = :vehicleId')
                ->setParameter('vehicleId', $vehicleId);
        }
        if ($vehicleIds) {
            $query->andWhere('IDENTITY(dce.vehicle) IN (:vehicleIds)')
                ->setParameter('vehicleIds', $vehicleIds);
        }
        if ($regNo) {
            $query->leftJoin(Vehicle::class, 'v', Join::WITH, 'dce.vehicle = v')
                ->andWhere('LOWER(v.regNo) LIKE LOWER(:regNo)')
                ->setParameter('regNo', '%' . $regNo . '%');
        }
        if ($typeId) {
            $query->andWhere('IDENTITY(dce.type) = :typeId')
                ->setParameter('typeId', $typeId);
        }
        if ($teamIds) {
            $query->andWhere('IDENTITY(dce.team) IN (:teamIds)')
                ->setParameter('teamIds', $teamIds);
        }

        return $query->getQuery();
    }
}
