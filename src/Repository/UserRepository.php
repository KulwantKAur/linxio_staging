<?php

namespace App\Repository;

use App\Entity\Role;
use App\Entity\Team;
use App\Entity\User;
use Carbon\Carbon;
use Doctrine\ORM\Query;

/**
 * UsersRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param $email
     * @return mixed
     * @throws \Doctrine\ORM\NoResultException
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findByEmail($email)
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('u')
            ->from(User::class, 'u')
            ->where('LOWER(u.email) = :email')
            ->setParameter('email', strtolower($email))
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();
    }

    /**
     * @param $id
     * @param $teamType
     * @return mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findByIdAndTeam($id, $teamType)
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('u')
            ->from(User::class, 'u')
            ->leftJoin('u.team', 't')
            ->where('u.id = :id')
            ->andWhere('t.type = :teamType')
            ->setParameter('id', $id)
            ->setParameter('teamType', $teamType)
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();
    }

    /**
     * @param $team
     * @return mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findByTeam($team)
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('u')
            ->from(User::class, 'u')
            ->where('u.team = :team')
            ->setParameter('team', $team)
            ->getQuery()
            ->getOneOrNullResult();
    }

    /**
     * @param Team $team
     * @return mixed
     */
    public function getDriversIdsByTeam(Team $team)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();

        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('u.id')
            ->from(User::class, 'u', 'u.id')
            ->leftJoin('u.role', 'r')
            ->andWhere('u.team = :team')
            ->setParameter('team', $team)
            ->andWhere('u.status IN (:statuses)')
            ->setParameter('statuses', User::LIST_STATUSES)
            ->andWhere(
                $qb->expr()->orX(
                    $qb->expr()->eq('r.name', ':roleName'),
                    $qb->expr()->eq('u.isDualAccount', 'true')
                )
            )
            ->setParameter('roleName', Role::ROLE_CLIENT_DRIVER)
            ->getQuery()
            ->getResult();
    }

    public function getByDriverSensorId(string $driverSensorId)
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('u')
            ->from(User::class, 'u')
            ->where('LOWER(u.driverSensorId) = :driverSensorId')
            ->setParameter('driverSensorId', strtolower($driverSensorId))
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();
    }

    public function getByDriverFOBId(string $driverFOBId)
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('u')
            ->from(User::class, 'u')
            ->where('LOWER(u.driverFOBId) = :driverFOBId')
            ->setParameter('driverFOBId', strtolower($driverFOBId))
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();
    }

    /**
     * @return Query
     */
    public function getAllToUpdateNetworkStatusQuery(): Query
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('u')
            ->from(User::class, 'u')
            ->where('u.networkStatus = :networkStatusOnline')
            ->andWhere('u.lastOnlineDate IS NOT NULL')
            ->andWhere('u.lastOnlineDate < :minOnlineDate')
            ->setParameter('networkStatusOnline', User::NETWORK_STATUS_ONLINE)
            ->setParameter('minOnlineDate', Carbon::now()->subSeconds(User::STATUS_ONLINE_DURATION))
            ->getQuery();
    }

    /**
     * @return int
     * @throws \Doctrine\ORM\NoResultException
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getAllToUpdateNetworkStatusCount(): int
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('COUNT(u)')
            ->from(User::class, 'u')
            ->where('u.networkStatus = :networkStatusOnline')
            ->andWhere('u.lastOnlineDate IS NOT NULL')
            ->andWhere('u.lastOnlineDate < :minOnlineDate')
            ->setParameter('networkStatusOnline', User::NETWORK_STATUS_ONLINE)
            ->setParameter('minOnlineDate', Carbon::now()->subSeconds(User::STATUS_ONLINE_DURATION))
            ->getQuery()
            ->getSingleScalarResult();
    }

    /**
     * @param false $isAdmin
     * @param false $isReseller
     * @param false $isClient
     * @return array|null
     */
    public function getUsersForFilter(
        $isAdmin = false,
        $isReseller = false,
        $isClient = false
    ) {
        $qb = $this->getEntityManager()
            ->createQueryBuilder();

        $qb->select('DISTINCT(u.team) as id')
            ->from(User::class, 'u')
            ->leftJoin('u.team', 'team');

        if ($isAdmin) {
            $qb->andWhere('team.type IN (:type)')
                ->setParameter('type', [Team::TEAM_ADMIN]);
        }

        if ($isReseller) {
            $qb->leftJoin('u.createdBy', 'resellerUserCreatedBy')
                ->leftJoin('resellerUserCreatedBy.team', 'resellerUserCreatedByTeam')
                ->leftJoin('team.client', 'resellerClients')
                ->leftJoin('resellerClients.createdBy', 'resellerClientCreatedBy')
                ->leftJoin('resellerClientCreatedBy.team', 'resellerClientCreatedByTeam')
                ->orWhere('team.type IN (:type)')
                ->orWhere('resellerUserCreatedByTeam.type = :type')
                ->orWhere('resellerClientCreatedByTeam.type = :type')
                ->setParameter('type', Team::TEAM_RESELLER);
        }

        if ($isClient) {
            $qb->leftJoin('u.createdBy', 'userCreatedBy')
                ->leftJoin('userCreatedBy.team', 'userCreatedByTeam')
                ->leftJoin('team.client', 'clients')
                ->leftJoin('clients.createdBy', 'clientCreatedBy')
                ->leftJoin('clientCreatedBy.team', 'clientCreatedByTeam')
                ->orWhere('team.type IN (:type)')
                ->orWhere('userCreatedByTeam.type = :type')
                ->orWhere('clientCreatedByTeam.type = :type')
                ->setParameter('type', Team::TEAM_CLIENT);
        }
        $result =  $qb->getQuery()->getResult();

        return  $result ? array_column($result, 'id') : null;
    }

    /**
     * @param $role
     * @return User|null
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findByRole($role)
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('u')
            ->from(User::class, 'u')
            ->leftJoin('u.role', 'r')
            ->andWhere('r.name = :roleName')
            ->setParameter('roleName', $role)
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();
    }
}
