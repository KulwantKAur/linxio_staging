<?php

namespace App\Repository\Tracker\Teltonika;

use App\Entity\Device;
use App\Entity\Tracker\Teltonika\TrackerSensor;
use Doctrine\Common\Collections\Criteria;
use Doctrine\ORM\QueryBuilder;

/**
 * TrackerSensorRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TrackerSensorRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param Device $device
     * @param $eventId
     * @param null $dateFrom
     * @param null $dateTo
     * @return QueryBuilder
     */
    public function getQuerySensorValueByDeviceAndEventId(
        Device $device,
        $eventId,
        $dateFrom = null,
        $dateTo = null
    ): QueryBuilder {
        $query = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('ts.eventValue, th.ts')
            ->from(TrackerSensor::class, 'ts')
            ->leftJoin('ts.trackerHistory', 'th')
            ->leftJoin('th.trackerPayload', 'tp')
            ->leftJoin('tp.trackerAuth', 'ta')
            ->leftJoin('ts.event', 'e')
            ->where('ta.device = :device')
            ->andWhere('e.deviceModel = :deviceModel')
            ->andWhere('e.remoteId = :eventId')
            ->setParameter('device', $device)
            ->setParameter('deviceModel', $device->getModel())
            ->setParameter('eventId', $eventId)
            ->orderBy('th.ts', Criteria::DESC);

        if ($dateFrom) {
            $query->andWhere('th.ts >= :dateFrom')
                ->setParameter('dateFrom', $dateFrom);
        }

        if ($dateTo) {
            $query->andWhere('th.ts <= :dateTo')
                ->setParameter('dateTo', $dateTo);
        }

        return $query;
    }

    /**
     * @param Device $device
     * @param $eventId
     * @param null $dateFrom
     * @param null $dateTo
     * @return mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getSensorValueByDeviceAndEventId(Device $device, $eventId, $dateFrom = null, $dateTo = null)
    {
        $query = $this->getQuerySensorValueByDeviceAndEventId($device, $eventId, $dateFrom, $dateTo);

        $result = $query
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();

        return $result ? $result['eventValue'] : null;
    }

    /**
     * @param Device $device
     * @param $eventId
     * @param null $dateFrom
     * @param null $dateTo
     * @return array|null
     */
    public function getSensorValuesByDeviceAndEventId(
        Device $device,
        $eventId,
        $dateFrom = null,
        $dateTo = null
    ): ?array {
        $query = $this->getQuerySensorValueByDeviceAndEventId($device, $eventId, $dateFrom, $dateTo);

        $result = $query
            ->orderBy('th.ts', Criteria::ASC)
            ->getQuery()
            ->getResult();

        return $result ?? null;
    }

    /**
     * @param Device $device
     * @param $eventId
     * @param null $dateFrom
     * @param null $dateTo
     * @return mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getMaxSensorValueByDeviceAndEventId(
        Device $device,
        $eventId,
        $dateFrom = null,
        $dateTo = null
    ): ?int {
        $query = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('MAX(ts.eventValue) AS max_value')
            ->from(TrackerSensor::class, 'ts')
            ->leftJoin('ts.trackerHistory', 'th')
            ->leftJoin('th.trackerPayload', 'tp')
            ->leftJoin('tp.trackerAuth', 'ta')
            ->leftJoin('ts.event', 'e')
            ->where('ta.device = :device')
            ->andWhere('e.deviceModel = :deviceModel')
            ->andWhere('e.remoteId = :eventId')
            ->setParameter('device', $device)
            ->setParameter('deviceModel', $device->getModel())
            ->setParameter('eventId', $eventId)
            ->orderBy('max_value', Criteria::DESC)
            ->groupBy('th.id');

        if ($dateFrom) {
            $query->andWhere('th.ts >= :dateFrom')
                ->setParameter('dateFrom', $dateFrom);
        }

        if ($dateTo) {
            $query->andWhere('th.ts <= :dateTo')
                ->setParameter('dateTo', $dateTo);
        }

        $result = $query
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();

        return $result ? $result['max_value'] : 0;
    }

    /**
     * @param Device $device
     * @param $eventId
     * @param null $dateFrom
     * @param null $dateTo
     * @return mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getMinSensorValueByDeviceAndEventId(
        Device $device,
        $eventId,
        $dateFrom = null,
        $dateTo = null
    ): ?int {
        $query = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('MIN(ts.eventValue) AS min_value')
            ->from(TrackerSensor::class, 'ts')
            ->leftJoin('ts.trackerHistory', 'th')
            ->leftJoin('th.trackerPayload', 'tp')
            ->leftJoin('tp.trackerAuth', 'ta')
            ->leftJoin('ts.event', 'e')
            ->where('ta.device = :device')
            ->andWhere('e.deviceModel = :deviceModel')
            ->andWhere('e.remoteId = :eventId')
            ->setParameter('device', $device)
            ->setParameter('deviceModel', $device->getModel())
            ->setParameter('eventId', $eventId)
            ->orderBy('min_value', Criteria::ASC)
            ->groupBy('th.id');

        if ($dateFrom) {
            $query->andWhere('th.ts >= :dateFrom')
                ->setParameter('dateFrom', $dateFrom);
        }

        if ($dateTo) {
            $query->andWhere('th.ts <= :dateTo')
                ->setParameter('dateTo', $dateTo);
        }

        $result = $query
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();

        return $result ? $result['min_value'] : 0;
    }
}
