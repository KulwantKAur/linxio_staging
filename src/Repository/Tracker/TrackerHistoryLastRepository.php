<?php

namespace App\Repository\Tracker;

use App\Entity\Device;
use App\Entity\Tracker\TrackerHistoryLast;
use App\Entity\Vehicle;
use App\Service\Tracker\TrackerService;
use Carbon\Carbon;
use Doctrine\Common\Collections\Criteria;

/**
 * TrackerHistoryLastRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TrackerHistoryLastRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param Device $device
     * @return mixed|TrackerHistoryLast
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getByDevice(Device $device): ?TrackerHistoryLast
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('thl')
            ->from(TrackerHistoryLast::class, 'thl')
            ->where('thl.device = :device')
            ->setParameter('device', $device)
            ->orderBy('thl.ts', Criteria::DESC)
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();
    }

    /**
     * @param Vehicle $vehicle
     * @return TrackerHistoryLast|null
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getByVehicle(Vehicle $vehicle): ?TrackerHistoryLast
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('thl')
            ->from(TrackerHistoryLast::class, 'thl')
            ->where('thl.vehicle = :vehicle')
            ->setParameter('vehicle', $vehicle)
            ->orderBy('thl.ts', Criteria::DESC)
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();
    }

    /**
     * @return null|array
     */
    public function getDeviceIdsForCalculations(): ?array
    {
        $allowedDT = Carbon::createFromTimestamp(TrackerService::getAllowedRecordTimestamp());
        $result = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('DISTINCT IDENTITY(thl.device) AS device_id')
            ->from(TrackerHistoryLast::class, 'thl')
            ->where('thl.ts >= :startDate')
            ->andWhere('thl.device IS NOT NULL')
            ->orderBy('device_id', Criteria::ASC)
            ->setParameter('startDate', $allowedDT)
            ->getQuery()
            ->getResult();

        return $result ? array_column($result, 'device_id') : [];
    }
}
