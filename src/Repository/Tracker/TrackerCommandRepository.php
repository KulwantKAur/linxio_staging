<?php

namespace App\Repository\Tracker;

use App\Entity\Device;
use App\Entity\Tracker\TrackerCommand;
use App\Entity\Vehicle;
use App\Service\Tracker\Command\TrackerCommandService;
use Doctrine\Common\Collections\Criteria;

/**
 * TrackerCommandRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TrackerCommandRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param Device $device
     * @param \DateTimeInterface|string|null $dateFrom
     * @param \DateTimeInterface|string|null $dateTo
     * @param bool|null $order
     * @return TrackerCommand[]|array|null
     */
    public function getRecordsWithTypeOdometerInRange(
        Device $device,
        $dateFrom = null,
        $dateTo = null,
        bool $order = null
    ): ?array {
        $query = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('tc')
            ->from(TrackerCommand::class, 'tc')
            ->where('tc.device = :device')
            ->andWhere('tc.vehicle = :vehicle')
            ->andWhere('tc.type = :typeOdometer')
            ->setParameter('device', $device)
            ->setParameter('vehicle', $device->getVehicle())
            ->setParameter('typeOdometer', TrackerCommandService::ODOMETER_COMMAND_TYPE);

        if ($dateFrom) {
            $query->andWhere('tc.createdAt >= :dateFrom')
                ->setParameter('dateFrom', $dateFrom);
        }
        if ($dateTo) {
            $query->andWhere('tc.createdAt <= :dateTo')
                ->setParameter('dateTo', $dateTo);
        }
        if ($order) {
            $query->orderBy('tc.createdAt', Criteria::ASC);
        }

        return $query->getQuery()->getResult();
    }

    /**
     * @param Device $device
     * @param \DateTimeInterface|string|null $dateFrom
     * @param \DateTimeInterface|string|null $dateTo
     * @return TrackerCommand|null
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getLastRecordWithTypeOdometerInRange(
        Device $device,
        $dateFrom = null,
        $dateTo = null
    ): ?TrackerCommand {
        $query = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('tc')
            ->from(TrackerCommand::class, 'tc')
            ->where('tc.device = :device')
            ->andWhere('tc.vehicle = :vehicle')
            ->andWhere('tc.type = :typeOdometer')
            ->orderBy('tc.createdAt', Criteria::DESC)
            ->setParameter('device', $device)
            ->setParameter('vehicle', $device->getVehicle())
            ->setParameter('typeOdometer', TrackerCommandService::ODOMETER_COMMAND_TYPE);

        if ($dateFrom) {
            $query->andWhere('tc.createdAt >= :dateFrom')
                ->setParameter('dateFrom', $dateFrom);
        }
        if ($dateTo) {
            $query->andWhere('tc.createdAt <= :dateTo')
                ->setParameter('dateTo', $dateTo);
        }

        return $query->getQuery()->setMaxResults(1)->getOneOrNullResult();
    }

    /**
     * @param Device $device
     * @param Vehicle|null $vehicle
     * @param \DateTimeInterface|string|null $dateFrom
     * @param \DateTimeInterface|string|null $dateTo
     * @return mixed|int|null
     */
    public function removeDeviceOdometerCommandsByPeriod(
        Device $device,
        ?Vehicle $vehicle,
        $dateFrom = null,
        $dateTo = null
    ) {
        $query = $this->getEntityManager()
            ->createQueryBuilder()
            ->delete(TrackerCommand::class, 'tc')
            ->where('tc.device = :device')
            ->andWhere('tc.vehicle = :vehicle')
            ->andWhere('tc.type = :typeOdometer')
            ->andWhere('tc.sentAt IS NULL')
            ->andWhere('tc.respondedAt IS NULL')
            ->setParameter('device', $device)
            ->setParameter('vehicle', $vehicle)
            ->setParameter('typeOdometer', TrackerCommandService::ODOMETER_COMMAND_TYPE);

        if ($dateFrom) {
            $query->andWhere('tc.createdAt >= :dateFrom')
                ->setParameter('dateFrom', $dateFrom);
        }
        if ($dateTo) {
            $query->andWhere('tc.createdAt < :dateTo')
                ->setParameter('dateTo', $dateTo);
        }

        return $query->getQuery()->execute();
    }
}
