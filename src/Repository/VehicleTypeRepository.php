<?php

namespace App\Repository;

use App\Entity\User;
use App\Entity\VehicleType;
use Doctrine\Common\Collections\Criteria;

/**
 * VehicleTypeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class VehicleTypeRepository extends \Doctrine\ORM\EntityRepository
{
    public function getVehiclesTypeByName($name)
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('vt')
            ->from(VehicleType::class, 'vt')
            ->where('LOWER(vt.name) = :name')
            ->andWhere('vt.team IS NULL')
            ->setParameter('name', $name)
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();
    }

    public function getVehicleTypes(
        User $user,
        $statuses = [VehicleType::STATUS_ACTIVE],
        $sort = 'name',
        $order = Criteria::DESC
    ) {
        $q = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('vt')
            ->from(VehicleType::class, 'vt')
            ->andWhere('vt.status IN (:statuses)')
            ->setParameter('statuses', $statuses);

        if ($user->isInAdminTeam()) {
            $q->andWhere('vt.team IS NULL');
        } else {
            $q->andWhere(
                $q->expr()->orX(
                    $q->expr()->eq('vt.team', ':team'),
                    $q->expr()->isNull('vt.team')
                ))->setParameter('team', $user->getTeam());
        }

        $q->orderBy('vt.' . $sort, $order);

        return $q->getQuery()->getResult();
    }

    public function getVehiclesTypeById($id, User $currentUser)
    {
        $q = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('vt')
            ->from(VehicleType::class, 'vt')
            ->where('vt.id = :id')
            ->setParameter('id', $id);

        if ($currentUser->isInAdminTeam()) {
            $q->andWhere('vt.team IS NULL');
        } else {
            $q->andWhere(
                $q->expr()->orX(
                    $q->expr()->eq('vt.team', ':team'),
                    $q->expr()->isNull('vt.team')
                ))->setParameter('team', $currentUser->getTeam());
        }

        return $q->getQuery()->setMaxResults(1)->getOneOrNullResult();
    }

    public function updateOrder(int $id, int $order)
    {
        $vtTable = $this->getEntityManager()->getClassMetadata(VehicleType::class)->getTableName();

        return $this->getEntityManager()->getConnection()
            ->executeQuery("UPDATE $vtTable SET \"sort\" = ? WHERE id = ?", [$order, $id]);
    }
}
