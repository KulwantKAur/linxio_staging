<?php

namespace App\Repository;

use App\Entity\Role;
use App\Entity\Setting;
use App\Entity\Team;
use App\Entity\User;
use \Doctrine\ORM\EntityRepository;

/**
 * SettingRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SettingRepository extends EntityRepository
{
    /**
     * @param $settingName
     * @param Team $team
     * @param Role|null $role
     * @param User|null $user
     * @return |null
     */
    public function getSetting($settingName, Team $team, Role $role = null, User $user = null)
    {
        $q = $this
            ->getEntityManager()
            ->createQueryBuilder()
            ->select('s')
            ->from(Setting::class, 's')
            ->andWhere('s.team = :team')
            ->setParameter('team', $team)
            ->addOrderBy('s.name')
            ->addOrderBy('s.role');
        if (is_array($settingName)) {
            $q->andWhere('s.name IN (:name)')
                ->setParameter('name', $settingName);
        } else {
            $q->andWhere('s.name = :name')
                ->setParameter('name', $settingName);
        }

        if ($role && $user) {
            $q->andWhere(
                $q->expr()->orX(
                    $q->expr()->eq('s.user ', ':user'),
                    $q->expr()->eq('s.role ', ':role'),
                    $q->expr()->andX($q->expr()->eq('s.user ', ':user'), $q->expr()->eq('s.role ', ':role')),
                    $q->expr()->andX($q->expr()->isNull('s.user'), $q->expr()->isNull('s.role'))
                )
            )->setParameter('user', $user)
                ->setParameter('role', $role);
        } elseif ($role) {
            $q->andWhere('s.role = :role')->setParameter('role', $role);
        } elseif ($user) {
            $q->andWhere('s.user = :user')->setParameter('user', $user);
        }

        $result = $q->getQuery()->getResult();

        if (is_array($settingName)) {
            return $result;
        }

        return count($result) ? $result[0] : null;
    }

    /**
     * @param int $integration
     * @return mixed[]
     * @throws \Doctrine\DBAL\DBALException
     */
    public function getTeamIdsWithIntegration(int $integration)
    {
        $json = "@> '[" . $integration . "]'";
        $sTable = $this->getEntityManager()->getClassMetadata(Setting::class)->getTableName();
        $sql = "SELECT s.team_id FROM $sTable s WHERE s.name = :settingName AND value $json";
        $stmt = $this->getEntityManager()->getConnection()->prepare($sql);
        $stmt->bindValue("settingName", Setting::INTEGRATIONS);
        $result = $stmt->executeQuery()->fetchAllAssociative();

        return count($result) ? array_column($result, 'team_id') : [];
    }

    public function getSettingForUpdate($settingName, Team $team, Role $role = null, User $user = null)
    {
        $q = $this
            ->getEntityManager()
            ->createQueryBuilder()
            ->select('s')
            ->from(Setting::class, 's')
            ->andWhere('s.team = :team')
            ->setParameter('team', $team)
            ->addOrderBy('s.name')
            ->addOrderBy('s.role');
        if (is_array($settingName)) {
            $q->andWhere('s.name IN (:name)')
                ->setParameter('name', $settingName);
        } else {
            $q->andWhere('s.name = :name')
                ->setParameter('name', $settingName);
        }

        if ($role) {
            $q->andWhere('s.role = :role')->setParameter('role', $role);
        } else {
            $q->andWhere('s.role IS NULL');
        }

        if ($user) {
            $q->andWhere('s.user = :user')->setParameter('user', $user);
        } else {
            $q->andWhere('s.user IS NULL');
        }

        $result = $q->getQuery()->getResult();

        if (is_array($settingName)) {
            return $result;
        }

        return count($result) ? $result[0] : null;
    }
}
