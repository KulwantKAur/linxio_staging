<?php

namespace App\Repository;

use App\Entity\Chat;
use App\Entity\ChatHistory;
use Doctrine\Common\Collections\Criteria;

/**
 * ChatRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ChatRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param int $userId
     * @return array|null
     */
    public function getUserChats(int $userId): ?array
    {
        return $this->getEntityManager()->createQueryBuilder()
            ->select('c')
            ->from(Chat::class, 'c')
            ->join('c.users', 'cu')
            ->where('cu.id = :usersId')
            ->setParameter('usersId', $userId)
            ->getQuery()
            ->getResult();
    }

    /**
     * @param int $userId
     * @return array
     */
    public function getUserChatIds(int $userId): array
    {
        $result =  $this->getEntityManager()->createQueryBuilder()
            ->select('c.id')
            ->from(Chat::class, 'c')
            ->join('c.users', 'cu')
            ->where('cu.id = :usersId')
            ->setParameter('usersId', $userId)
            ->getQuery()
            ->getResult();

        return $result ? array_column($result, 'id') : [];
    }

    /**
     * @param array $userIds
     * @return Chat|null
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getPersonalChatByUserIds(array $userIds): ?Chat
    {
        $subQuery = $this->getEntityManager()->createQueryBuilder()
            ->select('c_sub.id')
            ->from(Chat::class, 'c_sub')
            ->join('c_sub.users', 'cu_sub')
            ->where('cu_sub.id IN (:userIds)')
            ->groupBy('c_sub.id')
            ->having('COUNT(cu_sub.id) = 2')
            ->getQuery()
            ->getDQL();

        return $this->getEntityManager()->createQueryBuilder()
            ->select('c ')
            ->from(Chat::class, 'c')
            ->join('c.users', 'cu')
            ->where('c.id IN (' . $subQuery . ')')
            ->setParameter('userIds', $userIds)
            ->groupBy('c.id')
            ->having('COUNT(cu.id) = 2')
            ->orderBy('c.createdAt')
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();
    }

    /**
     * @param string $channel
     * @return Chat|null
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getChatByChannel(string $channel): ?Chat
    {
        return $this->getEntityManager()->createQueryBuilder()
            ->select('c')
            ->from(Chat::class, 'c')
            ->where('c.channel = :channel')
            ->setParameter('channel', $channel)
            ->orderBy('c.createdAt', Criteria::DESC)
            ->addOrderBy('c.id', Criteria::DESC)
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();
    }

    /**
     * @param string $channelMask
     * @return Chat|null
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getChatByChannelMask(string $channelMask): ?Chat
    {
        return $this->getEntityManager()->createQueryBuilder()
            ->select('c')
            ->from(Chat::class, 'c')
            ->where('c.channel LIKE :channelMask')
            ->setParameter('channelMask', '%' . $channelMask)
            ->orderBy('c.createdAt', Criteria::DESC)
            ->addOrderBy('c.id', Criteria::DESC)
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();
    }

    /**
     * @param ChatHistory $lastChatHistory
     * @return Chat|null
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getChatByLastChatHistory(ChatHistory $lastChatHistory): ?Chat
    {
        return $this->getEntityManager()->createQueryBuilder()
            ->select('c')
            ->from(Chat::class, 'c')
            ->where('c.lastChatHistory = :lastChatHistory')
            ->andWhere('c.id = :chatId')
            ->setParameter('lastChatHistory', $lastChatHistory)
            ->setParameter('chatId', $lastChatHistory->getChatId())
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();
    }

    /**
     * @param int $userId
     * @return array
     */
    public function getUserUnreadChats(int $userId): array
    {
        $result = $this->getEntityManager()->createQueryBuilder()
            ->select('c.id')
            ->from(Chat::class, 'c')
            ->leftJoin('c.unreadHistories', 'chu')
            ->where('chu.user = :userId')
            ->groupBy('c.id')
            ->setParameter('userId', $userId)
            ->getQuery()
            ->getResult();

        return $result ? array_column($result, 'id'): [];
    }
}
