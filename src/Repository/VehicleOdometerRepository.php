<?php

namespace App\Repository;

use App\Entity\Device;
use App\Entity\DeviceInstallation;
use App\Entity\VehicleOdometer;
use App\Entity\Tracker\TrackerHistory;
use App\Entity\Vehicle;
use Doctrine\Common\Collections\Criteria;
use Doctrine\DBAL\Query\QueryBuilder;

/**
 * VehicleOdometerRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class VehicleOdometerRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param Device $device
     * @return \Doctrine\ORM\Query
     */
    public function queryAllByDevice(Device $device)
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('vo')
            ->from(VehicleOdometer::class, 'vo')
            ->where('vo.device = :device')
            ->setParameter('device', $device)
            ->orderBy('vo.occurredAt', Criteria::DESC)
            ->getQuery();
    }

    /**
     * @param Vehicle $vehicle
     * @return \Doctrine\ORM\Query
     */
    public function queryAllByVehicle(Vehicle $vehicle)
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('vo')
            ->from(VehicleOdometer::class, 'vo')
            ->where('vo.vehicle = :vehicle')
            ->setParameter('vehicle', $vehicle)
            ->orderBy('vo.occurredAt', Criteria::DESC)
            ->getQuery();
    }

    /**
     * @param Vehicle $vehicle
     * @param $occurredAt
     * @return VehicleOdometer|null
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function lastByVehicleAndOccurredAt(Vehicle $vehicle, $occurredAt = null): ?VehicleOdometer
    {
        $maxDate = $this->newestDateByVehicleAndOccurredAt($vehicle, $occurredAt);

        if (!$maxDate) {
            return null;
        }

        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('vo')
            ->addSelect()
            ->from(VehicleOdometer::class, 'vo')
            ->where('vo.occurredAt = :maxDate')
            ->andWhere('vo.vehicle = :vehicle')
            ->setParameter('vehicle', $vehicle)
            ->setParameter('maxDate', $maxDate)
            ->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult();
    }

    /**
     * @param Vehicle $vehicle
     * @param $occurredAt
     * @return string|null
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function newestDateByVehicleAndOccurredAt(Vehicle $vehicle, $occurredAt)
    {
        $query = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('MAX(vo.occurredAt) as max_date')
            ->from(VehicleOdometer::class, 'vo')
            ->where('vo.vehicle = :vehicle')
            ->setParameter('vehicle', $vehicle);

        if ($occurredAt) {
            $query->andWhere('vo.occurredAt <= :occurredAt')
                ->setParameter('occurredAt', $occurredAt);
        }

        $result = $query->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult();

        return $result ? $result['max_date'] : null;
    }

    public function getLastOdometerCorrectionQueryBuilder(): QueryBuilder
    {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();

        $voTable = $em->getClassMetadata(VehicleOdometer::class)->getTableName();
        $odometerSubQuery = $em->getConnection()->createQueryBuilder()
            ->select('voo.id')
            ->from($voTable, 'voo')
            ->andWhere(
                $qb->expr()->andX(
                    $qb->expr()->lte('voo.occurred_at', ':dateTo'),
                    $qb->expr()->isNotNull('voo.accuracy'),
                    $qb->expr()->eq('voo.vehicle_id', 'vo.vehicle_id')
                )
            )->orderBy('voo.occurred_at', 'DESC')
            ->setMaxResults(1);

        return $em->getConnection()->createQueryBuilder()->select(['vo.vehicle_id', 'vo.accuracy',])
            ->from($voTable, 'vo')
            ->andWhere(
                $qb->expr()->andX(
                    $qb->expr()->lte('vo.occurred_at', ':dateTo'),
                    $qb->expr()->isNotNull('vo.accuracy')
                )
            )->andWhere('id = (' . $odometerSubQuery . ')');
    }

    /**
     * @param Device $device
     * @param Vehicle|null $vehicle
     * @param int $odometer
     * @param $dateFrom
     * @param $dateTo
     * @return mixed
     */
    public function updateOdometerAndAccuracyByRangeAndDevice(
        Device $device,
        ?Vehicle $vehicle,
        int $odometer,
        $dateFrom,
        $dateTo
    ) {
        $query = $this->getEntityManager()
            ->createQueryBuilder()
            ->update(VehicleOdometer::class, 'vo')
            ->set('vo.odometerFromDevice', $odometer)
            ->set('vo.accuracy', 0)
            ->where('vo.device = :device')
            ->setParameter('device', $device)
            ->andWhere('vo.occurredAt >= :dateFrom')
            ->setParameter('dateFrom', $dateFrom);

        if ($dateTo) {
            $query->andWhere('vo.occurredAt <= :dateTo')
                ->setParameter('dateTo', $dateTo);
        }
        if ($vehicle) {
            $query->andWhere('vo.vehicle = :vehicle')
                ->setParameter('vehicle', $vehicle);
        }

        return $query->getQuery()->execute();
    }
}
