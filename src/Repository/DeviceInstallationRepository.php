<?php

namespace App\Repository;

use App\Command\UpdateDeviceDataCommand;
use App\Entity\Device;
use App\Entity\DeviceInstallation;
use App\Entity\Team;
use App\Entity\User;
use App\Entity\UserGroup;
use Carbon\Carbon;
use Doctrine\Common\Collections\Criteria;

/**
 * DeviceInstallationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DeviceInstallationRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param string $deviceImei
     * @param string $regNo
     * @param Team|null $team
     * @return mixed
     */
    public function findByDeviceImeiOrVehicleRegNo(
        string $deviceImei = null,
        string $regNo = null,
        ?Team $team = null,
        ?User $currentUser = null
    ) {
        $q = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('i')
            ->from(DeviceInstallation::class, 'i')
            ->leftJoin('i.device', 'd')
            ->leftJoin('i.vehicle', 'v')
            ->leftJoin('d.model', 'dm')
            ->andWhere('i.installDate IS NOT NULL')
            ->andWhere('i.uninstallDate IS NULL');
        if ($team) {
            $q->andWhere('d.team = :team')
                ->andWhere('v.team = :team')
                ->setParameter('team', $team);
        }
        if ($deviceImei) {
            $q->andWhere('d.imei = :imei')
                ->setParameter('imei', $deviceImei);
        }
        if ($regNo) {
            $q->andWhere('LOWER(v.regNo) LIKE LOWER(:regNo)')
                ->setParameter('regNo', $regNo . '%');
        }

        if ($currentUser && $currentUser->needToCheckUserGroup()) {
            $userVehicles = $this->getEntityManager()->getRepository(UserGroup::class)
                ->getUserVehiclesIdFromUserGroup($currentUser);
            $q->andWhere('IDENTITY(i.vehicle) in (:vehicleIds)')->setParameter('vehicleIds', $userVehicles);
        }

        return $q->getQuery()->getResult();
    }

    /**
     * @param int $vehicleId
     * @param $dateFrom
     * @param $dateTo
     * @return null|array
     */
    public function getDeviceIdsByVehicleFromDateToDate(int $vehicleId, $dateFrom, $dateTo): ?array
    {
        $qb = $this->getEntityManager()->createQueryBuilder();

        $result = $qb->select('IDENTITY(di.device) as id')
            ->from(DeviceInstallation::class, 'di')
            ->where('IDENTITY(di.vehicle) = :vehicleId')
            ->andWhere(
                $qb->expr()->orX(
                    $qb->expr()->orX(
                        $qb->expr()->between(':dateFrom', 'di.installDate', 'di.uninstallDate'),
                        $qb->expr()->between(':dateTo', 'di.installDate', 'di.uninstallDate')
                    ),
                    $qb->expr()->orX(
                        $qb->expr()->between('di.installDate', ':dateFrom', ':dateTo'),
                        $qb->expr()->between('di.uninstallDate', ':dateFrom', ':dateTo')
                    ),
// @todo replace rule above if needed
//                    $qb->expr()->andX(
//                        $qb->expr()->lte('di.uninstallDate', ':dateTo'),
//                        $qb->expr()->gte('di.installDate', ':dateFrom')
//                    ),
                    $qb->expr()->andX(
                        $qb->expr()->isNull('di.uninstallDate'),
                        $qb->expr()->lte('di.installDate', ':dateTo')
                    )
                )
            )
            ->setParameter('vehicleId', $vehicleId)
            ->setParameter('dateFrom', $dateFrom)
            ->setParameter('dateTo', $dateTo)
            ->getQuery()
            ->getResult();

        return $result ? array_column($result, 'id') : null;
    }


    /**
     * @param int $deviceId
     * @param int $vehicleId
     * @return null|array
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findByDeviceAndVehicle(int $deviceId, int $vehicleId): ?DeviceInstallation
    {
        $qb = $this->getEntityManager()->createQueryBuilder();

        return $qb->select('di')
            ->from(DeviceInstallation::class, 'di')
            ->where('IDENTITY(di.vehicle) = :vehicleId')
            ->andWhere('IDENTITY(di.device) = :deviceId')
            ->setParameter('vehicleId', $vehicleId)
            ->setParameter('deviceId', $deviceId)
            ->orderBy('di.installDate', Criteria::DESC)
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();
    }

    /**
     * @param Device $device
     * @return mixed|DeviceInstallation[]
     * @throws \Exception
     */
    public function getDeviceInstallationsWithOdometerNotSynced(Device $device)
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('di')
            ->from(DeviceInstallation::class, 'di')
            ->where('di.device = :device')
            ->andWhere('di.odometer IS NOT NULL')
            ->andWhere('di.isOdometerSynced = false')
            ->setParameter('device', $device)
            ->orderBy('di.installDate', Criteria::ASC)
            ->getQuery()
            ->getResult();
    }

    /**
     * @param Device $device
     * @return int
     * @throws \Exception
     */
    public function getDeviceInstallationsCount(Device $device)
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('COUNT(di)')
            ->from(DeviceInstallation::class, 'di')
            ->where('di.device = :device')
            ->setParameter('device', $device)
            ->getQuery()
            ->getSingleScalarResult();
    }

    /**
     * @param Device $device
     * @return int
     * @throws \Exception
     */
    public function getDeviceInstallationsNotSyncedCount(Device $device)
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('COUNT(di)')
            ->from(DeviceInstallation::class, 'di')
            ->where('di.device = :device')
            ->andWhere('di.isOdometerSynced = false')
            ->setParameter('device', $device)
            ->getQuery()
            ->getSingleScalarResult();
    }

    /**
     * @param DeviceInstallation $deviceInstallation
     * @return mixed|DeviceInstallation
     * @throws \Exception
     */
    public function getPreviousDeviceInstallationWithOdometer(DeviceInstallation $deviceInstallation)
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('di')
            ->from(DeviceInstallation::class, 'di')
            ->where('di.device = :device')
            ->andWhere('di.installDate < :datetime')
            ->andWhere('di.odometer IS NOT NULL')
            ->setParameter('device', $deviceInstallation->getDevice())
            ->setParameter('datetime', $deviceInstallation->getInstallDate())
            ->orderBy('di.installDate', Criteria::DESC)
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();
    }

    /**
     * @param DeviceInstallation $deviceInstallation
     * @return mixed|DeviceInstallation
     * @throws \Exception
     */
    public function getNextDeviceInstallationWithOdometer(DeviceInstallation $deviceInstallation)
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('di')
            ->from(DeviceInstallation::class, 'di')
            ->where('di.device = :device')
            ->andWhere('di.installDate > :datetime')
            ->andWhere('di.odometer IS NOT NULL')
            ->setParameter('device', $deviceInstallation->getDevice())
            ->setParameter('datetime', $deviceInstallation->getInstallDate())
            ->orderBy('di.installDate', Criteria::ASC)
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();
    }
}
