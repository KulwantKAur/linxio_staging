<?php

namespace App\Repository;

use App\Entity\BillingEntityHistory;
use App\Entity\BillingPlan;
use App\Entity\Client;
use App\Entity\Device;
use App\Entity\DeviceInstallation;
use App\Entity\DeviceSensor;
use App\Entity\Sensor;
use App\Entity\Team;
use App\Entity\User;
use App\Entity\Vehicle;
use App\Repository\Billing\ClientBilling;
use App\Service\Billing\DTO\BillingInfoDTO;
use Carbon\Carbon;
use Doctrine\Common\Collections\Criteria;
use Doctrine\DBAL\Connection;
use Doctrine\DBAL\Query\QueryBuilder;
use Doctrine\DBAL\Types\Type;
use Doctrine\DBAL\Types\Types;
use Doctrine\ORM\Query;

/**
 * ClientRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ClientRepository extends \Doctrine\ORM\EntityRepository
{

    /**
     * @param bool $iterate
     * @return \Doctrine\ORM\Internal\Hydration\IterableResult|mixed
     * @throws \Exception
     */
    public function updateClientDemoBlocked(bool $iterate = false)
    {
        $qb = $this->createQueryBuilder('cl');

        $q = $qb
            ->select('cl')
            ->where(
                $qb->expr()->andX(
                    $qb->expr()->eq('cl.status', ':statusDemo'),
                    $qb->expr()->lt('cl.expirationDate', ':now')
                )
            )
            ->setParameter('statusDemo', Client::STATUS_DEMO, Types::STRING)
            ->setParameter('now', new \DateTime(), Types::DATETIME_MUTABLE)
            ->getQuery();

        if ($iterate) {
            return $q->iterate();
        }

        return $q->getResult();
    }

    /**
     * @param $teamId
     * @return int|mixed|string|null
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getClientNameByTeamId($teamId)
    {
        $result = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('c.name')
            ->from(Client::class, 'c')
            ->where('IDENTITY(c.team) = :teamId')
            ->setParameter('teamId', $teamId)
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();

        return $result ? $result['name'] : null;
    }

    public function getAdminClientTeams()
    {
        $result = $this->getEntityManager()->createQueryBuilder()
            ->select('IDENTITY(c.team) as id')
            ->from(Client::class, 'c')
            ->leftJoin('c.ownerTeam', 'ownerTeam')
            ->andWhere('ownerTeam.type = :type')
            ->setParameter('type', Team::TEAM_ADMIN)
            ->getQuery()
            ->getResult();

        return $result ? array_column($result, 'id') : null;
    }

    public function deleteManagerFromClientsById(int $managerId)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $q = $qb->update(Client::class, 'c')
            ->set('c.manager', 'null')
            ->where('c.manager = :managerId')
            ->setParameter('managerId', $managerId)
            ->getQuery();

        return $q->execute();
    }

    public function deleteSalesManagerFromClientsById(int $managerId)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $q = $qb->update(Client::class, 'c')
            ->set('c.salesManager', 'null')
            ->where('c.salesManager = :managerId')
            ->setParameter('managerId', $managerId)
            ->getQuery();

        return $q->execute();
    }

    /**
     * @param int $teamId
     * @return mixed
     */
    public function getClientMomentBillingInfo(int $teamId)
    {
        $em = $this->getEntityManager();
        $cTable = $em->getClassMetadata(Client::class)->getTableName();
        $bTable = $em->getClassMetadata(BillingEntityHistory::class)->getTableName();
        $sTable = $em->getClassMetadata(Sensor::class)->getTableName();
        $dTable = $em->getClassMetadata(Device::class)->getTableName();
        $vTable = $em->getClassMetadata(Vehicle::class)->getTableName();
        $diTable = $em->getClassMetadata(DeviceInstallation::class)->getTableName();
        $dsTable = $em->getClassMetadata(DeviceSensor::class)->getTableName();
        $bpTable = $em->getClassMetadata(BillingPlan::class)->getTableName();

        //active_vehicle_trackers deactivated_vehicle_trackers
        $deviceUVActiveQuery = $em->getConnection()->createQueryBuilder()
            ->select('count(*) as active_vehicle_trackers, beh.team_id')
            ->from($bTable, 'beh')
            ->innerJoin('beh', $dTable, 'd', 'beh.entity_id = d.id')
            ->where('d.usage=:deviceUsageVehicle')
            ->andWhere('beh.entity=:entityDevice')
            ->andWhere('beh.type=:typeCDR')
            ->andWhere('beh.date_from <= NOW() AND (beh.date_to >= NOW() OR beh.date_to IS NULL)')
            ->groupBy('beh.team_id');
        $deviceUVDeactivatedQuery = $em->getConnection()->createQueryBuilder()
            ->select('count(*) as deactivated_vehicle_trackers, beh.team_id')
            ->from($bTable, 'beh')
            ->innerJoin('beh', $dTable, 'd', 'beh.entity_id = d.id')
            ->where('d.usage=:deviceUsageVehicle')
            ->andWhere('beh.entity=:entityDevice')
            ->andWhere('beh.type=:typeD')
            ->andWhere('beh.date_from <= NOW() AND (beh.date_to >= NOW() OR beh.date_to IS NULL)')
            ->groupBy('beh.team_id');

        //active_personal_trackers deactivated_personal_trackers
        $deviceUPActiveQuery = $em->getConnection()->createQueryBuilder()
            ->select('count(*) as active_personal_trackers, beh.team_id')
            ->from($bTable, 'beh')
            ->innerJoin('beh', $dTable, 'd', 'beh.entity_id = d.id')
            ->where('d.usage=:deviceUsagePersonal')
            ->andWhere('beh.entity=:entityDevice')
            ->andWhere('beh.type=:typeCDR')
            ->andWhere('beh.date_from <= NOW() AND (beh.date_to >= NOW() OR beh.date_to IS NULL)')
            ->groupBy('beh.team_id');
        $deviceUPDeactivatedQuery = $em->getConnection()->createQueryBuilder()
            ->select('count(*) as deactivated_personal_trackers, beh.team_id')
            ->from($bTable, 'beh')
            ->innerJoin('beh', $dTable, 'd', 'beh.entity_id = d.id')
            ->where('d.usage=:deviceUsagePersonal')
            ->andWhere('beh.entity=:entityDevice')
            ->andWhere('beh.type=:typeD')
            ->andWhere('beh.date_from <= NOW() AND (beh.date_to >= NOW() OR beh.date_to IS NULL)')
            ->groupBy('beh.team_id');

        //active_asset_trackers deactivated_asset_trackers
        $deviceUAActiveQuery = $em->getConnection()->createQueryBuilder()
            ->select('count(*) as active_asset_trackers, beh.team_id')
            ->from($bTable, 'beh')
            ->innerJoin('beh', $dTable, 'd', 'beh.entity_id = d.id')
            ->where('d.usage=:deviceUsageAsset')
            ->andWhere('beh.entity=:entityDevice')
            ->andWhere('beh.type=:typeCDR')
            ->andWhere('beh.date_from <= NOW() AND (beh.date_to >= NOW() OR beh.date_to IS NULL)')
            ->groupBy('beh.team_id');
        $deviceUADeactivatedQuery = $em->getConnection()->createQueryBuilder()
            ->select('count(*) as deactivated_asset_trackers, beh.team_id')
            ->from($bTable, 'beh')
            ->innerJoin('beh', $dTable, 'd', 'beh.entity_id = d.id')
            ->where('d.usage=:deviceUsageAsset')
            ->andWhere('beh.entity=:entityDevice')
            ->andWhere('beh.type=:typeD')
            ->andWhere('beh.date_from <= NOW() AND (beh.date_to >= NOW() OR beh.date_to IS NULL)')
            ->groupBy('beh.team_id');

        //active_satellite_trackers deactivated_satellite_trackers
        $deviceUSActiveQuery = $em->getConnection()->createQueryBuilder()
            ->select('count(*) as active_satellite_trackers, beh.team_id')
            ->from($bTable, 'beh')
            ->innerJoin('beh', $dTable, 'd', 'beh.entity_id = d.id')
            ->where('d.usage=:deviceUsageSatellite')
            ->andWhere('beh.entity=:entityDevice')
            ->andWhere('beh.type=:typeCDR')
            ->andWhere('beh.date_from <= NOW() AND (beh.date_to >= NOW() OR beh.date_to IS NULL)')
            ->groupBy('beh.team_id');
        $deviceUSDeactivatedQuery = $em->getConnection()->createQueryBuilder()
            ->select('count(*) as deactivated_satellite_trackers, beh.team_id')
            ->from($bTable, 'beh')
            ->innerJoin('beh', $dTable, 'd', 'beh.entity_id = d.id')
            ->where('d.usage=:deviceUsageSatellite')
            ->andWhere('beh.entity=:entityDevice')
            ->andWhere('beh.type=:typeD')
            ->andWhere('beh.date_from <= NOW() AND (beh.date_to >= NOW() OR beh.date_to IS NULL)')
            ->groupBy('beh.team_id');

        //vehicle
        $vehicleActiveQuery = $em->getConnection()->createQueryBuilder()
            ->select('count(*) as active_vehicles, v.team_id')
            ->from($vTable, 'v')
            ->innerJoin(
                'v',
                $diTable,
                'di',
                'v.id = di.vehicle_id AND di.installdate <= NOW() AND (di.uninstalldate >= NOW() OR di.uninstalldate IS NULL)'
            )
            ->groupBy('team_id');
        $vehicleVirtualQuery = $em->getConnection()->createQueryBuilder()
            ->select('count(*) as virtual_vehicles, v.team_id')
            ->from($vTable, 'v')
            ->leftJoin(
                'v',
                $diTable,
                'di',
                'v.id = di.vehicle_id AND di.installdate <= NOW() AND (di.uninstalldate >= NOW() OR di.uninstalldate IS NULL)'
            )
            ->where('di.id IS NULL')
            ->andWhere('v.status!=:vehicleStatusDeleted')
            ->andWhere('v.status!=:vehicleStatusArchive')
            ->groupBy('v.team_id');
        $vehicleArchiveQuery = $em->getConnection()->createQueryBuilder()
            ->select('count(*) as archived_vehicles, beh.team_id')
            ->from($bTable, 'beh')
            ->andWhere('beh.entity=:entityVehicle')
            ->andWhere('beh.type=:typeArchive')
            ->andWhere('beh.date_from <= NOW() AND (beh.date_to >= NOW() OR beh.date_to IS NULL)')
            ->groupBy('beh.team_id');
        $vehicleDeletedQuery = $em->getConnection()->createQueryBuilder()
            ->select('count(*) as deleted_vehicles, v.team_id')
            ->from($vTable, 'v')
            ->where('v.status=:vehicleStatusDeleted')
            ->groupBy('v.team_id');

        //sensor
        $sensorActiveQuery = $em->getConnection()->createQueryBuilder()
            ->select('count(s.id) as all_sensors, s.team_id')
            ->from($sTable, 's')
            ->groupBy('s.team_id');
        $sensorDeletedQuery = $em->getConnection()->createQueryBuilder()
            ->select('count(s.id) as deleted_sensors, s.team_id')
            ->from($sTable, 's')
            ->innerJoin('s', $dsTable, 'ds', 's.id = ds.sensor_id AND ds.status=:deviceSensorDeleted')
            ->groupBy('s.team_id');

        $billingPlanQuery = $em->getConnection()->createQueryBuilder()
            ->select('distinct on (billing_plan.team_id) billing_plan.*')
            ->from($bpTable, 'billing_plan')
            ->where('billing_plan.status = :billingPlanActive')
            ->orderBy('billing_plan.team_id, billing_plan.created_at', Criteria::DESC); //find active value

        return $em->getConnection()->createQueryBuilder()
            ->select('c.team_id,
            COALESCE(duva.active_vehicle_trackers, 0) - COALESCE(duvd.deactivated_vehicle_trackers, 0) AS active_vehicle_trackers,
            COALESCE(duvd.deactivated_vehicle_trackers, 0) AS deactivated_vehicle_trackers,
            COALESCE(dupa.active_personal_trackers, 0) - COALESCE(dupd.deactivated_personal_trackers, 0) AS active_personal_trackers,
            COALESCE(dupd.deactivated_personal_trackers, 0) AS deactivated_personal_trackers,
            COALESCE(duaa.active_asset_trackers, 0) - COALESCE(duad.deactivated_asset_trackers, 0) AS active_asset_trackers,
            COALESCE(duad.deactivated_asset_trackers, 0) AS deactivated_asset_trackers,
            COALESCE(dusa.active_satellite_trackers, 0) - COALESCE(dusd.deactivated_satellite_trackers, 0) AS active_satellite_trackers,
            COALESCE(dusd.deactivated_satellite_trackers, 0) AS deactivated_satellite_trackers,
            COALESCE(va.active_vehicles, 0) AS active_vehicles,
            COALESCE(vv.virtual_vehicles, 0) AS virtual_vehicles,
            COALESCE(var.archived_vehicles, 0) AS archived_vehicles,
            COALESCE(vd.deleted_vehicles, 0) AS deleted_vehicles,
            COALESCE(sa.all_sensors-COALESCE(sd.deleted_sensors, 0), 0) AS active_sensors,
            COALESCE(0, 0) AS archived_sensors,
            COALESCE(sd.deleted_sensors, 0) AS deleted_sensors,
            bp.device_vehicle_active as bp_device_vehicle_active,
            COALESCE((COALESCE(duva.active_vehicle_trackers, 0) - COALESCE(duvd.deactivated_vehicle_trackers, 0)::decimal * 10 / 10) * bp.device_vehicle_active, 0) AS ' . ClientBilling::activeVehicleTrackersTotal . ',
            COALESCE((CEIL(COALESCE(duvd.deactivated_vehicle_trackers, 0)::decimal * 10) / 10) * bp.device_vehicle_deactivated, 0) AS ' . ClientBilling::deactivatedVehicleTrackersTotal . ',
            COALESCE((CEIL(COALESCE(dupa.active_personal_trackers, 0)::decimal * 10) / 10) * bp.device_personal_active, 0) AS ' . ClientBilling::activePersonalTrackersTotal . ',
            COALESCE((CEIL(COALESCE(dupd.deactivated_personal_trackers, 0)::decimal * 10) / 10) * bp.device_personal_deactivated, 0) AS ' . ClientBilling::deactivatedPersonalTrackersTotal . ',
            COALESCE((CEIL(COALESCE(duaa.active_asset_trackers, 0)::decimal * 10) / 10) * bp.device_asset_active, 0) AS ' . ClientBilling::activeAssetTrackersTotal . ',
            COALESCE((CEIL(COALESCE(duad.deactivated_asset_trackers, 0)::decimal * 10) / 10) * bp.device_asset_deactivated, 0) AS ' . ClientBilling::deactivatedAssetTrackersTotal . ',
            COALESCE((CEIL(COALESCE(dusa.active_satellite_trackers, 0)::decimal * 10) / 10) * bp.device_satellite_active, 0) AS ' . ClientBilling::activeSatelliteTrackersTotal . ',
            COALESCE((CEIL(COALESCE(dusd.deactivated_satellite_trackers, 0)::decimal * 10) / 10) * bp.device_satellite_deactivated, 0) AS ' . ClientBilling::deactivatedSatelliteTrackersTotal . ',
            COALESCE((CEIL(COALESCE(vv.virtual_vehicles, 0)::decimal * 10) / 10) * bp.vehicle_virtual, 0) AS ' . ClientBilling::virtualVehiclesTotal . ',
            COALESCE((CEIL(COALESCE(va.active_vehicles, 0)::decimal * 10) / 10) * bp.sign_post_vehicle, 0) AS ' . ClientBilling::activeVehicleSignPostTotal . ',
            COALESCE((CEIL(COALESCE(var.archived_vehicles, 0)::decimal * 10) / 10) * bp.vehicle_archived, 0) AS ' . ClientBilling::archivedVehiclesTotal . ',
            COALESCE(COALESCE(sa.all_sensors - COALESCE(sd.deleted_sensors, 0), 0) * bp.temp_sensor, 0) AS ' . ClientBilling::activeSensorsTotal . '
            ')
            ->from($cTable, 'c')
            ->leftJoin(
                'c',
                sprintf('(%s)', $billingPlanQuery->getSQL()),
                'bp',
                'bp.team_id = c.team_id'
            )
            ->leftJoin(
                'c',
                sprintf('(%s)', $deviceUVActiveQuery->getSQL()),
                'duva',
                'duva.team_id = c.team_id'
            )
            ->leftJoin(
                'c',
                sprintf('(%s)', $deviceUVDeactivatedQuery->getSQL()),
                'duvd',
                'duvd.team_id = c.team_id'
            )
            ->leftJoin(
                'c',
                sprintf('(%s)', $deviceUPActiveQuery->getSQL()),
                'dupa',
                'dupa.team_id = c.team_id'
            )
            ->leftJoin(
                'c',
                sprintf('(%s)', $deviceUPDeactivatedQuery->getSQL()),
                'dupd',
                'dupd.team_id = c.team_id'
            )
            ->leftJoin(
                'c',
                sprintf('(%s)', $deviceUAActiveQuery->getSQL()),
                'duaa',
                'duaa.team_id = c.team_id'
            )
            ->leftJoin(
                'c',
                sprintf('(%s)', $deviceUADeactivatedQuery->getSQL()),
                'duad',
                'duad.team_id = c.team_id'
            )
            ->leftJoin(
                'c',
                sprintf('(%s)', $deviceUSActiveQuery->getSQL()),
                'dusa',
                'dusa.team_id = c.team_id'
            )
            ->leftJoin(
                'c',
                sprintf('(%s)', $deviceUSDeactivatedQuery->getSQL()),
                'dusd',
                'dusd.team_id = c.team_id'
            )
            ->leftJoin(
                'c',
                sprintf('(%s)', $vehicleActiveQuery->getSQL()),
                'va',
                'va.team_id = c.team_id'
            )
            ->leftJoin(
                'c',
                sprintf('(%s)', $vehicleVirtualQuery->getSQL()),
                'vv',
                'vv.team_id = c.team_id'
            )
            ->leftJoin(
                'c',
                sprintf('(%s)', $vehicleArchiveQuery->getSQL()),
                'var',
                'var.team_id = c.team_id'
            )
            ->leftJoin(
                'c',
                sprintf('(%s)', $vehicleDeletedQuery->getSQL()),
                'vd',
                'vd.team_id = c.team_id'
            )
            ->leftJoin(
                'c',
                sprintf('(%s)', $sensorActiveQuery->getSQL()),
                'sa',
                'sa.team_id = c.team_id'
            )
            ->leftJoin(
                'c',
                sprintf('(%s)', $sensorDeletedQuery->getSQL()),
                'sd',
                'sd.team_id = c.team_id'
            )
            ->setParameter('entityDevice', BillingEntityHistory::ENTITY_DEVICE)
            ->setParameter('entityVehicle', BillingEntityHistory::ENTITY_VEHICLE)
            ->setParameter('typeArchive', BillingEntityHistory::TYPE_ARCHIVE)
            ->setParameter('typeCDR', BillingEntityHistory::TYPE_CREATE_DELETE)
            ->setParameter('typeD', BillingEntityHistory::TYPE_DEACTIVATED)
            ->setParameter('deviceUsageVehicle', Device::USAGE_VEHICLE)
            ->setParameter('deviceUsagePersonal', Device::USAGE_PERSONAL)
            ->setParameter('deviceUsageAsset', Device::USAGE_ASSET)
            ->setParameter('deviceUsageSatellite', Device::USAGE_SATELLITE)
            ->setParameter('vehicleStatusDeleted', Vehicle::STATUS_DELETED)
            ->setParameter('vehicleStatusArchive', Vehicle::STATUS_ARCHIVE)
            ->setParameter('deviceSensorDeleted', DeviceSensor::STATUS_DELETED)
            ->setParameter('billingPlanActive', BillingPlan::STATUS_ACTIVE)
            ->andWhere('c.team_id=:team')
            ->setParameter('team', $teamId);
    }

    public function getClientsBillingInfo(BillingInfoDTO $params): QueryBuilder
    {
        $sd = Carbon::parse($params->startDate);
        $ed = Carbon::parse($params->endDate);
        $period = $params->period ?? $sd->daysInMonth;
        $em = $this->getEntityManager();
        $cTable = $em->getClassMetadata(Client::class)->getTableName();
        $bTable = $em->getClassMetadata(BillingEntityHistory::class)->getTableName();
        $sTable = $em->getClassMetadata(Sensor::class)->getTableName();
        $dTable = $em->getClassMetadata(Device::class)->getTableName();
        $vTable = $em->getClassMetadata(Vehicle::class)->getTableName();
        $diTable = $em->getClassMetadata(DeviceInstallation::class)->getTableName();
        $dsTable = $em->getClassMetadata(DeviceSensor::class)->getTableName();
        $bpTable = $this->getEntityManager()->getClassMetadata(BillingPlan::class)->getTableName();

        $selectSql = "DISTINCT generate_series(
                CASE WHEN date_from::date < date_trunc('month', :startDate::date)::date
                THEN date_trunc('month', :startDate::date)
                ELSE date_from::date END,
                coalesce(
                    date_to,
                    :endDate::date),
                '1 day'::interval)::date day_a, entity_id, entity, beh.team_id";

        //active_vehicle_trackers deactivated_vehicle_trackers
        $deviceUVAllDaysQuery = $em->getConnection()->createQueryBuilder()
            ->select($selectSql)
            ->from($bTable, 'beh')
            ->innerJoin('beh', $dTable, 'd', 'beh.entity_id = d.id')
            ->where('d.usage=:deviceUsageVehicle')
            ->andWhere('beh.entity=:entityDevice')
            ->andWhere('beh.type=:typeCDR');

        $deviceUVInactiveDaysQuery = $em->getConnection()->createQueryBuilder()
            ->select($selectSql)
            ->from($bTable, 'beh')
            ->innerJoin('beh', $dTable, 'd', 'beh.entity_id = d.id')
            ->where('d.usage=:deviceUsageVehicle')
            ->andWhere('beh.entity=:entityDevice')
            ->andWhere('beh.type=:typeD');

        $deviceUVInactiveDaysCountQuery = $em->getConnection()->createQueryBuilder()
            ->select('count(dia.*) inactive_device_uv_count, dia.team_id')
            ->from(sprintf('(%s)', $deviceUVInactiveDaysQuery->getSQL()), 'dia')
            ->groupBy('dia.team_id');

        $deviceUVActiveDaysQuery = $em->getConnection()->createQueryBuilder()
            ->select('count(da.*) active_device_uv_count, da.team_id')
            ->from(sprintf('(%s)', $deviceUVAllDaysQuery->getSQL()), 'da')
            ->leftJoin(
                'da',
                sprintf('(%s)', $deviceUVInactiveDaysQuery->getSQL()),
                'di',
                'di.day_a = da.day_a AND di.entity_id = da.entity_id AND di.entity = da.entity AND di.team_id = da.team_id'
            )
            ->where('di.day_a IS NULL')
            ->groupBy('da.team_id');

        //active_personal_trackers deactivated_personal_trackers
        $deviceUPAllDaysQuery = $em->getConnection()->createQueryBuilder()
            ->select($selectSql)
            ->from($bTable, 'beh')
            ->innerJoin('beh', $dTable, 'd', 'beh.entity_id = d.id')
            ->where('d.usage=:deviceUsagePersonal')
            ->andWhere('beh.entity=:entityDevice')
            ->andWhere('beh.type=:typeCDR');

        $deviceUPInactiveDaysQuery = $em->getConnection()->createQueryBuilder()
            ->select($selectSql)
            ->from($bTable, 'beh')
            ->innerJoin('beh', $dTable, 'd', 'beh.entity_id = d.id')
            ->where('d.usage=:deviceUsagePersonal')
            ->andWhere('beh.entity=:entityDevice')
            ->andWhere('beh.type=:typeD');

        $deviceUPInactiveDaysCountQuery = $em->getConnection()->createQueryBuilder()
            ->select('count(dia.*) inactive_device_up_count, dia.team_id')
            ->from(sprintf('(%s)', $deviceUPInactiveDaysQuery->getSQL()), 'dia')
            ->groupBy('dia.team_id');

        $deviceUPActiveDaysQuery = $em->getConnection()->createQueryBuilder()
            ->select('count(da.*) active_device_up_count, da.team_id')
            ->from(sprintf('(%s)', $deviceUPAllDaysQuery->getSQL()), 'da')
            ->leftJoin(
                'da',
                sprintf('(%s)', $deviceUPInactiveDaysQuery->getSQL()),
                'di',
                'di.day_a = da.day_a AND di.entity_id = da.entity_id AND di.entity = da.entity AND di.team_id = da.team_id'
            )
            ->where('di.day_a IS NULL')
            ->groupBy('da.team_id');

        //active_asset_trackers deactivated_asset_trackers
        $deviceUAAllDaysQuery = $em->getConnection()->createQueryBuilder()
            ->select($selectSql)
            ->from($bTable, 'beh')
            ->innerJoin('beh', $dTable, 'd', 'beh.entity_id = d.id')
            ->where('d.usage=:deviceUsageAsset')
            ->andWhere('beh.entity=:entityDevice')
            ->andWhere('beh.type=:typeCDR');

        $deviceUAInactiveDaysQuery = $em->getConnection()->createQueryBuilder()
            ->select($selectSql)
            ->from($bTable, 'beh')
            ->innerJoin('beh', $dTable, 'd', 'beh.entity_id = d.id')
            ->where('d.usage=:deviceUsageAsset')
            ->andWhere('beh.entity=:entityDevice')
            ->andWhere('beh.type=:typeD');

        $deviceUAInactiveDaysCountQuery = $em->getConnection()->createQueryBuilder()
            ->select('count(dia.*) inactive_device_ua_count, dia.team_id')
            ->from(sprintf('(%s)', $deviceUAInactiveDaysQuery->getSQL()), 'dia')
            ->groupBy('dia.team_id');

        $deviceUAActiveDaysQuery = $em->getConnection()->createQueryBuilder()
            ->select('count(da.*) active_device_ua_count, da.team_id')
            ->from(sprintf('(%s)', $deviceUAAllDaysQuery->getSQL()), 'da')
            ->leftJoin(
                'da',
                sprintf('(%s)', $deviceUAInactiveDaysQuery->getSQL()),
                'di',
                'di.day_a = da.day_a AND di.entity_id = da.entity_id AND di.entity = da.entity AND di.team_id = da.team_id'
            )
            ->where('di.day_a IS NULL')
            ->groupBy('da.team_id');

        //active_satellite_trackers deactivated_satellite_trackers
        $deviceUSAllDaysQuery = $em->getConnection()->createQueryBuilder()
            ->select($selectSql)
            ->from($bTable, 'beh')
            ->innerJoin('beh', $dTable, 'd', 'beh.entity_id = d.id')
            ->where('d.usage=:deviceUsageSatellite')
            ->andWhere('beh.entity=:entityDevice')
            ->andWhere('beh.type=:typeCDR');

        $deviceUSInactiveDaysQuery = $em->getConnection()->createQueryBuilder()
            ->select($selectSql)
            ->from($bTable, 'beh')
            ->innerJoin('beh', $dTable, 'd', 'beh.entity_id = d.id')
            ->where('d.usage=:deviceUsageSatellite')
            ->andWhere('beh.entity=:entityDevice')
            ->andWhere('beh.type=:typeD');

        $deviceUSInactiveDaysCountQuery = $em->getConnection()->createQueryBuilder()
            ->select('count(dia.*) inactive_device_us_count, dia.team_id')
            ->from(sprintf('(%s)', $deviceUSInactiveDaysQuery->getSQL()), 'dia')
            ->groupBy('dia.team_id');

        $deviceUSActiveDaysQuery = $em->getConnection()->createQueryBuilder()
            ->select('count(da.*) active_device_us_count, da.team_id')
            ->from(sprintf('(%s)', $deviceUSAllDaysQuery->getSQL()), 'da')
            ->leftJoin(
                'da',
                sprintf('(%s)', $deviceUSInactiveDaysQuery->getSQL()),
                'di',
                'di.day_a = da.day_a AND di.entity_id = da.entity_id AND di.entity = da.entity AND di.team_id = da.team_id'
            )
            ->where('di.day_a IS NULL')
            ->groupBy('da.team_id');

        //vehicle
        $vehicleActiveDaysQuery = $em->getConnection()->createQueryBuilder()
            ->select("DISTINCT generate_series(
                CASE WHEN di.installdate::date < date_trunc('month', :startDate::date)::date
                THEN date_trunc('month', :startDate::date)
                ELSE di.installdate::date END,
                coalesce(
                    di.uninstalldate,
                    :endDate::date),
                '1 day'::interval)::date day_a, v.id, v.team_id")
            ->from($vTable, 'v')
            ->innerJoin(
                'v',
                $diTable,
                'di',
                'v.id = di.vehicle_id'
            );
        $vehicleActiveDaysCountQuery = $em->getConnection()->createQueryBuilder()
            ->select('count(va.*) active_vehicles, va.team_id')
            ->from(sprintf('(%s)', $vehicleActiveDaysQuery->getSQL()), 'va')
            ->groupBy('va.team_id');
        $vehicleVehiclesDaysQuery = $em->getConnection()->createQueryBuilder()
            ->select("DISTINCT generate_series(
                CASE WHEN di.installdate::date < date_trunc('month', :startDate::date)::date
                THEN date_trunc('month', :startDate::date)
                ELSE di.installdate::date END,
                coalesce(
                    di.uninstalldate,
                    :endDate::date),
                '1 day'::interval)::date day_a, v.id, v.team_id")
            ->from($vTable, 'v')
            ->leftJoin(
                'v',
                $diTable,
                'di',
                'v.id = di.vehicle_id'
            )
            ->where('di.id IS NULL')
            ->andWhere('v.status!=:vehicleStatusDeleted')
            ->andWhere('v.status!=:vehicleStatusArchive');
        $virtualVehiclesDaysCountQuery = $em->getConnection()->createQueryBuilder()
            ->select('count(va.*) virtual_vehicles, va.team_id')
            ->from(sprintf('(%s)', $vehicleVehiclesDaysQuery->getSQL()), 'va')
            ->groupBy('va.team_id');
        $vehicleArchiveDaysQuery = $em->getConnection()->createQueryBuilder()
            ->select($selectSql)
            ->from($bTable, 'beh')
            ->andWhere('beh.entity=:entityVehicle')
            ->andWhere('beh.type=:typeA');
        $vehicleArchiveDaysCountQuery = $em->getConnection()->createQueryBuilder()
            ->select('count(va.*) archived_vehicles, va.team_id')
            ->from(sprintf('(%s)', $vehicleArchiveDaysQuery->getSQL()), 'va')
            ->groupBy('va.team_id');
        $vehicleDeletedQuery = $em->getConnection()->createQueryBuilder()
            ->select('count(*) as deleted_vehicles, v.team_id')
            ->from($vTable, 'v')
            ->where('v.status=:vehicleStatusDeleted')
            ->groupBy('v.team_id');

        //sensor
        $sensorActiveQuery = $em->getConnection()->createQueryBuilder()
            ->select('count(s.id) as all_sensors, s.team_id')
            ->from($sTable, 's')
            ->groupBy('s.team_id');
        $sensorDeletedQuery = $em->getConnection()->createQueryBuilder()
            ->select('count(s.id) as deleted_sensors, s.team_id')
            ->from($sTable, 's')
            ->innerJoin('s', $dsTable, 'ds', 's.id = ds.sensor_id AND ds.status=:deviceSensorDeleted')
            ->groupBy('s.team_id');

        $billingPlanQuery = $em->getConnection()->createQueryBuilder()
            ->select('distinct on (billing_plan.team_id) billing_plan.*')
            ->from($bpTable, 'billing_plan')
            ->where('billing_plan.created_at < :startDate')
            ->orderBy('billing_plan.team_id, billing_plan.created_at', Criteria::DESC); //find closest value

        $query = $em->getConnection()->createQueryBuilder()
            ->addSelect(
                'c.team_id',
                'c.id as client_id',
                'c.name as client_name',
                ClientBilling::activeVehicleTrackers . ' as active_vehicle_trackers',
                ClientBilling::deactivatedVehicleTrackers . ' as deactivated_vehicle_trackers',
                ClientBilling::activePersonalTrackers . ' as active_personal_trackers',
                ClientBilling::deactivatedPersonalTrackers . ' as deactivated_personal_trackers',
                ClientBilling::activeAssetTrackers . ' as active_asset_trackers',
                ClientBilling::deactivatedAssetTrackers . ' as deactivated_asset_trackers',
                ClientBilling::activeSatelliteTrackers . ' as active_satellite_trackers',
                ClientBilling::deactivatedSatelliteTrackers . ' as deactivated_satellite_trackers',
                ClientBilling::activeVehicles . ' as active_vehicles',
                ClientBilling::virtualVehicles . ' as virtual_vehicles',
                ClientBilling::archivedVehicles . ' as archived_vehicles',
                ClientBilling::deletedVehicles . ' as deleted_vehicles',
                ClientBilling::activeSensors . ' as active_sensors',
                ClientBilling::archivedSensors . ' as archived_sensors',
                ClientBilling::deletedSensors . ' as deleted_sensors',

                ClientBilling::activeVehicleTrackersTotalSelect . ' as ' . ClientBilling::activeVehicleTrackersTotal,
                ClientBilling::deactivatedVehicleTrackersTotalSelect . ' as ' . ClientBilling::deactivatedVehicleTrackersTotal,
                ClientBilling::activePersonalTrackersTotalSelect . ' as ' . ClientBilling::activePersonalTrackersTotal,
                ClientBilling::deactivatedPersonalTrackersTotalSelect . ' as ' . ClientBilling::deactivatedPersonalTrackersTotal,
                ClientBilling::activeAssetTrackersTotalSelect . ' as ' . ClientBilling::activeAssetTrackersTotal,
                ClientBilling::deactivatedAssetTrackersTotalSelect . ' as ' . ClientBilling::deactivatedAssetTrackersTotal,
                ClientBilling::activeSatelliteTrackersTotalSelect . ' as ' . ClientBilling::activeSatelliteTrackersTotal,
                ClientBilling::deactivatedSatelliteTrackersTotalSelect . ' as ' . ClientBilling::deactivatedSatelliteTrackersTotal,
                ClientBilling::activeVehiclesTotalSelect . ' as ' . ClientBilling::activeVehiclesTotal,
                ClientBilling::virtualVehiclesTotalSelect . ' as ' . ClientBilling::virtualVehiclesTotal,
                ClientBilling::archivedVehiclesTotalSelect . ' as ' . ClientBilling::archivedVehiclesTotal,
                ClientBilling::deletedVehiclesTotalSelect . ' as ' . ClientBilling::deletedVehiclesTotal,
                ClientBilling::activeSensorsTotalSelect . ' as ' . ClientBilling::activeSensorsTotal,
                ClientBilling::archivedSensorsTotalSelect . ' as ' . ClientBilling::archivedSensorsTotal,
                ClientBilling::deletedSensorsTotalSelect . ' as ' . ClientBilling::deletedSensorsTotal,
                ClientBilling::activeVehiclesSignPostTotalSelect . ' as ' . ClientBilling::activeVehicleSignPostTotal,

                ClientBilling::activeVehicleTrackersTotalSelect . ' + ' .
                ClientBilling::deactivatedVehicleTrackersTotalSelect . ' + ' .
                ClientBilling::activePersonalTrackersTotalSelect . ' +' .
                ClientBilling::deactivatedPersonalTrackersTotalSelect . ' + ' .
                ClientBilling::activeAssetTrackersTotalSelect . ' + ' .
                ClientBilling::deactivatedAssetTrackersTotalSelect . ' + ' .
                ClientBilling::activeVehiclesTotalSelect . ' +' .
                ClientBilling::virtualVehiclesTotalSelect . ' + ' .
                ClientBilling::archivedVehiclesTotalSelect . ' + ' .
                ClientBilling::deletedVehiclesTotalSelect . ' +' .
                ClientBilling::activeSensorsTotalSelect . ' + ' .
                ClientBilling::archivedSensorsTotalSelect . ' + ' .
                ClientBilling::activeVehiclesSignPostTotalSelect . ' + ' .
                ClientBilling::deletedSensorsTotalSelect
                . ' as client_total',

                '(SUM(' . ClientBilling::activeVehicleTrackersTotalSelect . ') OVER () + ' .
                'SUM(' . ClientBilling::deactivatedVehicleTrackersTotalSelect . ') OVER() + ' .
                'SUM(' . ClientBilling::activePersonalTrackersTotalSelect . ') OVER() + ' .
                'SUM(' . ClientBilling::deactivatedPersonalTrackersTotalSelect . ') OVER() + ' .
                'SUM(' . ClientBilling::activeAssetTrackersTotalSelect . ') OVER() + ' .
                'SUM(' . ClientBilling::deactivatedAssetTrackersTotalSelect . ') OVER() + ' .
                'SUM(' . ClientBilling::activeSatelliteTrackersTotalSelect . ') OVER() + ' .
                'SUM(' . ClientBilling::deactivatedSatelliteTrackersTotalSelect . ') OVER() + ' .
                'SUM(' . ClientBilling::activeVehiclesTotalSelect . ') OVER() + ' .
                'SUM(' . ClientBilling::virtualVehiclesTotalSelect . ') OVER() + ' .
                'SUM(' . ClientBilling::archivedVehiclesTotalSelect . ') OVER() + ' .
                'SUM(' . ClientBilling::deletedVehiclesTotalSelect . ') OVER() + ' .
                'SUM(' . ClientBilling::activeSensorsTotalSelect . ') OVER() + ' .
                'SUM(' . ClientBilling::archivedSensorsTotalSelect . ') OVER() + ' .
                'SUM(' . ClientBilling::activeVehiclesSignPostTotalSelect . ') OVER() + ' .
                'SUM(' . ClientBilling::deletedSensorsTotalSelect . ') OVER())' . ' as ' . ClientBilling::allClientsTotalSum,


                'SUM(' . ClientBilling::activeVehicleTrackersTotalSelect . ') OVER () as ' . ClientBilling::activeVehicleTrackersTotalSum,
                'SUM(' . ClientBilling::deactivatedVehicleTrackersTotalSelect . ') OVER() as ' . ClientBilling::deactivatedVehicleTrackersTotalSum,
                'SUM(' . ClientBilling::activePersonalTrackersTotalSelect . ') OVER() as ' . ClientBilling::activePersonalTrackersTotalSum,
                'SUM(' . ClientBilling::deactivatedPersonalTrackersTotalSelect . ') OVER() as ' . ClientBilling::deactivatedPersonalTrackersTotalSum,
                'SUM(' . ClientBilling::activeAssetTrackersTotalSelect . ') OVER() as ' . ClientBilling::activeAssetTrackersTotalSum,
                'SUM(' . ClientBilling::deactivatedAssetTrackersTotalSelect . ') OVER() as ' . ClientBilling::deactivatedAssetTrackersTotalSum,
                'SUM(' . ClientBilling::activeSatelliteTrackersTotalSelect . ') OVER() as ' . ClientBilling::activeSatelliteTrackersTotalSum,
                'SUM(' . ClientBilling::deactivatedSatelliteTrackersTotalSelect . ') OVER() as ' . ClientBilling::deactivatedSatelliteTrackersTotalSum,
                'SUM(' . ClientBilling::activeVehiclesTotalSelect . ') OVER() as ' . ClientBilling::activeVehiclesTotalSum,
                'SUM(' . ClientBilling::virtualVehiclesTotalSelect . ') OVER() as ' . ClientBilling::virtualVehiclesTotalSum,
                'SUM(' . ClientBilling::archivedVehiclesTotalSelect . ') OVER() as ' . ClientBilling::archivedVehiclesTotalSum,
                'SUM(' . ClientBilling::deletedVehiclesTotalSelect . ') OVER() as ' . ClientBilling::deletedVehiclesTotalSum,
                'SUM(' . ClientBilling::activeSensorsTotalSelect . ') OVER() as ' . ClientBilling::activeSensorsTotalSum,
                'SUM(' . ClientBilling::archivedSensorsTotalSelect . ') OVER() as ' . ClientBilling::archivedSensorsTotalSum,
                'SUM(' . ClientBilling::deletedSensorsTotalSelect . ') OVER() as ' . ClientBilling::deletedSensorsTotalSum,
                'SUM(' . ClientBilling::activeVehiclesSignPostTotalSelect . ') OVER() as ' . ClientBilling::activeVehicleSignPostTotalSum
            )
            ->from($cTable, 'c')
            ->andWhere('c.team_id IN (:teamIds)')
            ->leftJoin(
                'c',
                sprintf('(%s)', $billingPlanQuery->getSQL()),
                'bp',
                'bp.team_id = c.team_id'
            )
            ->leftJoin(
                'c',
                sprintf('(%s)', $deviceUVActiveDaysQuery->getSQL()),
                'duva',
                'duva.team_id = c.team_id'
            )
            ->leftJoin(
                'c',
                sprintf('(%s)', $deviceUVInactiveDaysCountQuery->getSQL()),
                'duvia',
                'duvia.team_id = c.team_id'
            )
            ->leftJoin(
                'c',
                sprintf('(%s)', $deviceUPActiveDaysQuery->getSQL()),
                'dupa',
                'dupa.team_id = c.team_id'
            )
            ->leftJoin(
                'c',
                sprintf('(%s)', $deviceUPInactiveDaysCountQuery->getSQL()),
                'dupia',
                'dupia.team_id = c.team_id'
            )
            ->leftJoin(
                'c',
                sprintf('(%s)', $deviceUAActiveDaysQuery->getSQL()),
                'duaa',
                'duaa.team_id = c.team_id'
            )
            ->leftJoin(
                'c',
                sprintf('(%s)', $deviceUAInactiveDaysCountQuery->getSQL()),
                'duaia',
                'duaia.team_id = c.team_id'
            )
            ->leftJoin(
                'c',
                sprintf('(%s)', $deviceUSActiveDaysQuery->getSQL()),
                'dusa',
                'dusa.team_id = c.team_id'
            )
            ->leftJoin(
                'c',
                sprintf('(%s)', $deviceUSInactiveDaysCountQuery->getSQL()),
                'dusia',
                'dusia.team_id = c.team_id'
            )
            ->leftJoin(
                'c',
                sprintf('(%s)', $vehicleActiveDaysCountQuery->getSQL()),
                'vva',
                'vva.team_id = c.team_id'
            )
            ->leftJoin(
                'c',
                sprintf('(%s)', $virtualVehiclesDaysCountQuery->getSQL()),
                'vv',
                'vv.team_id = c.team_id'
            )
            ->leftJoin(
                'c',
                sprintf('(%s)', $vehicleArchiveDaysCountQuery->getSQL()),
                'vvar',
                'vvar.team_id = c.team_id'
            )
            ->leftJoin(
                'c',
                sprintf('(%s)', $vehicleDeletedQuery->getSQL()),
                'vvd',
                'vvd.team_id = c.team_id'
            )
            ->leftJoin(
                'c',
                sprintf('(%s)', $sensorActiveQuery->getSQL()),
                'sa',
                'sa.team_id = c.team_id'
            )
            ->leftJoin(
                'c',
                sprintf('(%s)', $sensorDeletedQuery->getSQL()),
                'sd',
                'sd.team_id = c.team_id'
            )
            ->setParameter('teamIds', $params->teamId, Connection::PARAM_INT_ARRAY)
            ->setParameter('startDate', $params->startDate)
            ->setParameter('endDate', $params->endDate)
            ->setParameter('period', $period)
            ->setParameter('entityDevice', BillingEntityHistory::ENTITY_DEVICE)
            ->setParameter('entityVehicle', BillingEntityHistory::ENTITY_VEHICLE)
            ->setParameter('typeCDR', BillingEntityHistory::TYPE_CREATE_DELETE)
            ->setParameter('typeD', BillingEntityHistory::TYPE_DEACTIVATED)
            ->setParameter('typeA', BillingEntityHistory::TYPE_ARCHIVE)
            ->setParameter('deviceUsageVehicle', Device::USAGE_VEHICLE)
            ->setParameter('deviceUsagePersonal', Device::USAGE_PERSONAL)
            ->setParameter('deviceUsageAsset', Device::USAGE_ASSET)
            ->setParameter('deviceUsageSatellite', Device::USAGE_SATELLITE)
            ->setParameter('vehicleStatusDeleted', Vehicle::STATUS_DELETED)
            ->setParameter('vehicleStatusArchive', Vehicle::STATUS_ARCHIVE)
            ->setParameter('deviceSensorDeleted', DeviceSensor::STATUS_DELETED)
            ->setParameter('billingStatusActive', BillingPlan::STATUS_ACTIVE);

        if ($params->sort) {
            $query->orderBy($params->sort, $params->order);
        }

        if ($params->clientName) {
            $query->andWhere('LOWER(c.name) LIKE LOWER(:clientName)')
                ->setParameter('clientName', $params->clientName . '%');
        }

        return $query;
    }

    public function getClientsBillingPaymentInfo(BillingInfoDTO $params): QueryBuilder
    {
        $query = $this->getClientsBillingInfo($params);
        $query->select([
            'c.team_id',
            'c.id as client_id',
            'c.name as client_name',

            ClientBilling::activeVehicleTrackers . ' as active_vehicle_trackers',
            'bp.device_vehicle_active as ' . ClientBilling::activeVehicleTrackersPrice,
            'COALESCE(' . ClientBilling::activeVehicleTrackers . ' * bp.device_vehicle_active, 0) as ' . ClientBilling::activeVehicleTrackersTotal,

            ClientBilling::deactivatedVehicleTrackers . ' as deactivated_vehicle_trackers',
            'bp.device_vehicle_deactivated as ' . ClientBilling::deactivatedVehicleTrackersPrice,
            'COALESCE(' . ClientBilling::deactivatedVehicleTrackers . ' * bp.device_vehicle_deactivated, 0) as ' . ClientBilling::deactivatedVehicleTrackersTotal,

            ClientBilling::activePersonalTrackers . ' as active_personal_trackers',
            'bp.device_personal_active as ' . ClientBilling::activePersonalTrackersPrice,
            'COALESCE(' . ClientBilling::activePersonalTrackers . ' * bp.device_personal_active, 0) as ' . ClientBilling::activePersonalTrackersTotal,

            ClientBilling::deactivatedPersonalTrackers . ' as deactivated_personal_trackers',
            'bp.device_personal_deactivated as ' . ClientBilling::deactivatedPersonalTrackersPrice,
            'COALESCE(' . ClientBilling::deactivatedPersonalTrackers . ' * bp.device_personal_deactivated, 0) as ' . ClientBilling::deactivatedPersonalTrackersTotal,

            ClientBilling::activeAssetTrackers . ' as active_asset_trackers',
            'bp.device_asset_active as ' . ClientBilling::activeAssetTrackersPrice,
            'COALESCE(' . ClientBilling::activeAssetTrackers . ' * bp.device_asset_active, 0) as ' . ClientBilling::activeAssetTrackersTotal,

            ClientBilling::deactivatedAssetTrackers . ' as deactivated_asset_trackers',
            'bp.device_asset_deactivated as ' . ClientBilling::deactivatedAssetTrackersPrice,
            'COALESCE(' . ClientBilling::deactivatedAssetTrackers . ' * bp.device_asset_deactivated, 0) as ' . ClientBilling::deactivatedAssetTrackersTotal,

            ClientBilling::activeSatelliteTrackers . ' as active_satellite_trackers',
            'bp.device_satellite_active as ' . ClientBilling::activeSatelliteTrackersPrice,
            'COALESCE(' . ClientBilling::activeSatelliteTrackers . ' * bp.device_satellite_active, 0) as ' . ClientBilling::activeSatelliteTrackersTotal,

            ClientBilling::deactivatedSatelliteTrackers . ' as deactivated_satellite_trackers',
            'bp.device_satellite_deactivated as ' . ClientBilling::deactivatedSatelliteTrackersPrice,
            'COALESCE(' . ClientBilling::deactivatedSatelliteTrackers . ' * bp.device_satellite_deactivated, 0) as ' . ClientBilling::deactivatedSatelliteTrackersTotal,

            ClientBilling::activeVehicles . ' as active_vehicles',
            '0 as ' . ClientBilling::activeVehiclesPrice,
            '0 as ' . ClientBilling::activeVehiclesTotal,

            ClientBilling::virtualVehicles . ' as virtual_vehicles',
            'bp.vehicle_virtual as ' . ClientBilling::virtualVehiclesPrice,
            'COALESCE(' . ClientBilling::virtualVehicles . ' * bp.vehicle_virtual, 0) as ' . ClientBilling::virtualVehiclesTotal,

            ClientBilling::archivedVehicles . ' as archived_vehicles',
            'bp.vehicle_archived as ' . ClientBilling::archivedVehiclesPrice,
            'COALESCE(' . ClientBilling::archivedVehicles . ' * bp.vehicle_archived, 0) as ' . ClientBilling::archivedVehiclesTotal,

            ClientBilling::deletedVehicles . ' as deleted_vehicles',
            '0 as ' . ClientBilling::deletedVehiclesPrice,
            '0 as ' . ClientBilling::deletedVehiclesTotal,

            ClientBilling::activeSensors . ' as active_sensors',
            'temp_sensor as ' . ClientBilling::activeSensorsPrice,
            'COALESCE(' . ClientBilling::activeSensors . ' * temp_sensor, 0) as ' . ClientBilling::activeSensorsTotal,

            ClientBilling::archivedSensors . ' as archived_sensors',
            'bp.sensor_archived as ' . ClientBilling::archivedSensorsPrice,
            'COALESCE(' . ClientBilling::archivedSensors . ' * bp.sensor_archived, 0) as ' . ClientBilling::archivedSensorsTotal,

            ClientBilling::deletedSensors . ' as deleted_sensors',
            '0 as ' . ClientBilling::deletedSensorsPrice,
            '0 as ' . ClientBilling::deletedSensorsTotal,

            ClientBilling::activeVehicles . ' as active_vehicle_sign_post',
            'bp.sign_post_vehicle as ' . ClientBilling::activeVehicleSignPostPrice,
            'COALESCE(' . ClientBilling::activeVehicles . ' * bp.sign_post_vehicle, 0) as ' . ClientBilling::activeVehicleSignPostTotal,

            'SUM(' . ClientBilling::activeVehicleTrackers . ' * bp.device_vehicle_active) OVER () as ' . ClientBilling::activeVehicleTrackersTotalSum,
            'SUM(' . ClientBilling::deactivatedVehicleTrackers . ' * bp.device_vehicle_deactivated) OVER() as ' . ClientBilling::deactivatedVehicleTrackersTotalSum,
            'SUM(' . ClientBilling::activePersonalTrackers . ' * bp.device_personal_active) OVER() as ' . ClientBilling::activePersonalTrackersTotalSum,
            'SUM(' . ClientBilling::deactivatedPersonalTrackers . ' * bp.device_personal_deactivated) OVER() as ' . ClientBilling::deactivatedPersonalTrackersTotalSum,
            'SUM(' . ClientBilling::activeAssetTrackers . ' * bp.device_asset_active) OVER() as ' . ClientBilling::activeAssetTrackersTotalSum,
            'SUM(' . ClientBilling::deactivatedAssetTrackers . ' * bp.device_asset_deactivated) OVER() as ' . ClientBilling::deactivatedAssetTrackersTotalSum,
            'SUM(' . ClientBilling::activeSatelliteTrackers . ' * bp.device_satellite_active) OVER() as ' . ClientBilling::activeSatelliteTrackersTotalSum,
            'SUM(' . ClientBilling::deactivatedSatelliteTrackers . ' * bp.device_satellite_deactivated) OVER() as ' . ClientBilling::deactivatedSatelliteTrackersTotalSum,
            '0 as ' . ClientBilling::activeVehiclesTotalSum,
            'SUM(' . ClientBilling::virtualVehicles . ' * bp.vehicle_virtual) OVER() as ' . ClientBilling::virtualVehiclesTotalSum,
            'SUM(' . ClientBilling::archivedVehicles . ' * bp.vehicle_archived) OVER() as ' . ClientBilling::archivedVehiclesTotalSum,
            '0 as ' . ClientBilling::deletedVehiclesTotalSum,
            'SUM(' . ClientBilling::activeSensors . ' * temp_sensor) OVER() as ' . ClientBilling::activeSensorsTotalSum,
            'SUM(' . ClientBilling::archivedSensors . ' * bp.sensor_archived) OVER() as ' . ClientBilling::archivedSensorsTotalSum,
            '0 as ' . ClientBilling::deletedSensorsTotalSum,
            'SUM(' . ClientBilling::activeVehicles . ' * bp.sign_post_vehicle) OVER () as ' . ClientBilling::activeVehicleSignPostTotalSum,

        ]);

        return $query;
    }

    public function getGrossChartData($params)
    {
        $query = $this->getClientsBillingInfo($params);
        $query->select('(SUM(' . ClientBilling::activeVehicleTrackersTotalSelect . ') OVER () + ' .
            'SUM(' . ClientBilling::deactivatedVehicleTrackersTotalSelect . ') OVER() + ' .
            'SUM(' . ClientBilling::activePersonalTrackersTotalSelect . ') OVER() + ' .
            'SUM(' . ClientBilling::deactivatedPersonalTrackersTotalSelect . ') OVER() + ' .
            'SUM(' . ClientBilling::activeAssetTrackersTotalSelect . ') OVER() + ' .
            'SUM(' . ClientBilling::deactivatedAssetTrackersTotalSelect . ') OVER() + ' .
            'SUM(' . ClientBilling::activeSatelliteTrackersTotalSelect . ') OVER() + ' .
            'SUM(' . ClientBilling::deactivatedSatelliteTrackersTotalSelect . ') OVER() + ' .
            'SUM(' . ClientBilling::activeVehiclesTotalSelect . ') OVER() + ' .
            'SUM(' . ClientBilling::virtualVehiclesTotalSelect . ') OVER() + ' .
            'SUM(' . ClientBilling::archivedVehiclesTotalSelect . ') OVER() + ' .
            'SUM(' . ClientBilling::deletedVehiclesTotalSelect . ') OVER() + ' .
            'SUM(' . ClientBilling::activeSensorsTotalSelect . ') OVER() + ' .
            'SUM(' . ClientBilling::archivedSensorsTotalSelect . ') OVER() + ' .
            'SUM(' . ClientBilling::activeVehiclesSignPostTotalSelect . ') OVER() + ' .
            'SUM(' . ClientBilling::deletedSensorsTotalSelect . ') OVER())' . ' as ' . ClientBilling::allClientsTotalSum);

        return $query->executeQuery()->fetchOne();
    }

    public function getTopClientsChartData($params)
    {
        $query = $this->getClientsBillingInfo($params);
        $query->select(ClientBilling::activeVehicleTrackersTotalSelect . ' + ' .
            ClientBilling::deactivatedVehicleTrackersTotalSelect . ' + ' .
            ClientBilling::activePersonalTrackersTotalSelect . ' + ' .
            ClientBilling::deactivatedPersonalTrackersTotalSelect . ' + ' .
            ClientBilling::activeAssetTrackersTotalSelect . ' + ' .
            ClientBilling::deactivatedAssetTrackersTotalSelect . ' + ' .
            ClientBilling::activeSatelliteTrackersTotalSelect . ' + ' .
            ClientBilling::deactivatedSatelliteTrackersTotalSelect . ' + ' .
            ClientBilling::activeVehiclesTotalSelect . ' + ' .
            ClientBilling::virtualVehiclesTotalSelect . ' + ' .
            ClientBilling::archivedVehiclesTotalSelect . ' + ' .
            ClientBilling::deletedVehiclesTotalSelect . ' + ' .
            ClientBilling::activeSensorsTotalSelect . ' + ' .
            ClientBilling::archivedSensorsTotalSelect . ' + ' .
            ClientBilling::activeVehiclesSignPostTotalSelect . ' + ' .
            ClientBilling::deletedSensorsTotalSelect . ' as client_total')
            ->addSelect('(SUM(' . ClientBilling::activeVehicleTrackersTotalSelect . ') OVER () + ' .
                'SUM(' . ClientBilling::deactivatedVehicleTrackersTotalSelect . ') OVER() + ' .
                'SUM(' . ClientBilling::activePersonalTrackersTotalSelect . ') OVER() + ' .
                'SUM(' . ClientBilling::deactivatedPersonalTrackersTotalSelect . ') OVER() + ' .
                'SUM(' . ClientBilling::activeAssetTrackersTotalSelect . ') OVER() + ' .
                'SUM(' . ClientBilling::deactivatedAssetTrackersTotalSelect . ') OVER() + ' .
                'SUM(' . ClientBilling::activeSatelliteTrackersTotalSelect . ') OVER() + ' .
                'SUM(' . ClientBilling::deactivatedSatelliteTrackersTotalSelect . ') OVER() + ' .
                'SUM(' . ClientBilling::activeVehiclesTotalSelect . ') OVER() + ' .
                'SUM(' . ClientBilling::virtualVehiclesTotalSelect . ') OVER() + ' .
                'SUM(' . ClientBilling::archivedVehiclesTotalSelect . ') OVER() + ' .
                'SUM(' . ClientBilling::deletedVehiclesTotalSelect . ') OVER() + ' .
                'SUM(' . ClientBilling::activeSensorsTotalSelect . ') OVER() + ' .
                'SUM(' . ClientBilling::archivedSensorsTotalSelect . ') OVER() + ' .
                'SUM(' . ClientBilling::activeVehiclesSignPostTotalSelect . ') OVER() + ' .
                'SUM(' . ClientBilling::deletedSensorsTotalSelect . ') OVER())' . ' as ' . ClientBilling::allClientsTotalSum)
            ->addSelect(
                'c.team_id',
                'c.id as client_id',
                'c.name as client_name')
            ->addOrderBy('client_total', 'DESC')
            ->setMaxResults(5);

        return $query->executeQuery()->fetchAllAssociative();
    }

    /**
     * @param User $user
     * @param array $params
     * @param array|null $resellerTeamIds
     * @return float|int|mixed|string|null
     */
    public function getTeamListForFilter(
        User $user,
        array $params,
        ?array $resellerTeamIds = null
    ) {
        $searchName = $params['name'] ?? null;

        $qb = $this->getEntityManager()
            ->createQueryBuilder();

        $qb->select('DISTINCT(cl.team) as id, cl.name')
            ->from(Client::class, 'cl')
            ->where('cl.ownerTeam IN (:teamId)')
            ->orWhere('cl.team IN (:teamId)')
            ->setParameter('teamId', $user->getTeamId())
            ->orderBy('cl.team');

        if ($resellerTeamIds) {
            $qb->orWhere('cl.ownerTeam IN (:resellerTeamIds)')
                ->setParameter('resellerTeamIds', $resellerTeamIds);
        }

        if ($searchName) {
            $qb->andWhere('LOWER(cl.name) LIKE LOWER(:name)')
                ->setParameter('name', $searchName . '%');
        }

        $result = $qb->getQuery()->getResult();

        return $result ?? null;
    }

    public function getClientsBillingPrepayment(BillingInfoDTO $params): QueryBuilder
    {
        return $this->getClientsBillingPaymentInfo($params);
    }

    public function getClientsWithXero(): array
    {
        $qb = $this->getEntityManager()
            ->createQueryBuilder();

        $qb->select('c')
            ->from(Client::class, 'c')
            ->leftJoin('c.xeroClientAccount', 'x')
            ->andWhere('x IS NOT NULL');


        return $qb->getQuery()->getResult() ?? [];
    }

    /**
     * @return float|int|mixed[]|string
     */
    public function getListClients($ownerTeam = null)
    {
        $q = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('IDENTITY(cl.team) as id, cl.name', 'cl.chevronAccountId')
            ->from(Client::class, 'cl');

        if ($ownerTeam) {
            $q->andWhere('cl.ownerTeam IN (:ownerTeam)')->setParameter('ownerTeam', $ownerTeam);
        }

        return $q->orderBy('cl.team')->getQuery()->getArrayResult();
    }

    /**
     * @return float|int|mixed[]|string
     */
    public function getClientsByName(string $name)
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('IDENTITY(cl.team) as teamId, cl.name, cl.id')
            ->from(Client::class, 'cl')
            ->where('lower(cl.name) = lower(:name)')
            ->setParameter('name', $name)
            ->orderBy('cl.team')
            ->getQuery()
            ->useQueryCache(true)
            ->enableResultCache(3600)
            ->getArrayResult();
    }

    public function getClientsByChevronAccountId($chevronAccountId)
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('IDENTITY(cl.team) as teamId, cl.name, cl.id')
            ->from(Client::class, 'cl')
            ->where('cl.chevronAccountId = :chevronAccountId')
            ->setParameter('chevronAccountId', $chevronAccountId)
            ->orderBy('cl.team')
            ->getQuery()
            ->useQueryCache(true)
            ->enableResultCache(3600)
            ->getArrayResult();
    }

    public function getClientByTeamId(int $teamId)
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('c')
            ->from(Client::class, 'c')
            ->where('IDENTITY(c.team) = :teamId')
            ->setParameter('teamId', $teamId)
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();
    }

    /**
     * @param string $clientName
     * @return Team|null
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getClientByClientName(string $clientName): ?Client
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('c')
            ->from(Client::class, 'c')
            ->where('c.name = :clientName')
            ->setParameter('clientName', $clientName)
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();
    }

    /**
     * @param string $abn
     * @return Client|null
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getClientByAbn(string $abn): ?Client
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('c')
            ->from(Client::class, 'c')
            ->where('c.taxNr = :abn')
            ->setParameter('abn', $abn)
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();
    }

    /**
     * @param string $chevronAccountId
     * @return Client|null
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getClientByChevronAccountId(string $chevronAccountId): ?Client
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('c')
            ->from(Client::class, 'c')
            ->where('c.chevronAccountId = :chevronAccountId')
            ->setParameter('chevronAccountId', $chevronAccountId)
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();
    }
}
