<?php

namespace App\Repository;

use App\Entity\Integration;
use App\Entity\IntegrationData;
use App\Entity\Setting;
use App\Entity\Team;

/**
 * IntegrationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class IntegrationRepository extends \Doctrine\ORM\EntityRepository
{
    public function getIntegrationsByTeam(Team $team)
    {
        $integrationsIds = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('s.value')
            ->from(Setting::class, 's')
            ->andWhere('s.name = :name')
            ->andWhere('s.team = :team')
            ->setParameter('team', $team)
            ->setParameter('name', Setting::INTEGRATIONS)
            ->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult();

        $integrationsIds = $integrationsIds ? $integrationsIds['value'] : [];

        $integrations = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('i')
            ->from(Integration::class, 'i')
            ->andWhere('i.id IN (:integrationIds)')
            ->setParameter('integrationIds', $integrationsIds)
            ->getQuery()
            ->getResult();

        $data = [];
        foreach ($integrations as $integration) {
            $item = $integration->toArray();
            $integrationData = $this->getIntegrationDataByIntegrationIdAndTeam($integration->getId(), $team);
            $item['data'] = $integrationData ? $integrationData->toArray() : null;
            $item['status'] = $integrationData ? $integrationData->getStatus() : IntegrationData::STATUS_DISABLED;
            $data[] = $item;
        }

        return $data;
    }

    public function getIntegrationDataByIntegrationIdAndTeam($integrationId, Team $team)
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('data')
            ->from(IntegrationData::class, 'data')
            ->andWhere('data.team = :team')
            ->andWhere('IDENTITY(data.integration) = :integrationId')
            ->setParameter('integrationId', $integrationId)
            ->setParameter('team', $team)
            ->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult();
    }

}
