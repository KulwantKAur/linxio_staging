<?php

namespace App\Repository;

use App\Entity\Device;
use App\Entity\DeviceInstallation;
use App\Entity\DeviceModel;
use App\Entity\DeviceVendor;
use App\Entity\Reseller;
use App\Entity\Setting;
use App\Entity\Team;
use App\Entity\TimeZone;
use App\Entity\Vehicle;
use Carbon\Carbon;
use Doctrine\Common\Collections\Criteria;
use Doctrine\DBAL\Connection;
use Doctrine\ORM\Query;
use Doctrine\ORM\Query\Expr;

/**
 * DeviceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DeviceRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param Vehicle $vehicle
     * @return null
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getDeviceByVehicle(Vehicle $vehicle)
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('d')
            ->from(Device::class, 'd')
            ->leftJoin(DeviceInstallation::class, 'di', 'WITH', 'di.device = d.id')
            ->leftJoin('di.vehicle', 'v')
            ->where('v.id = :vehicle')
            ->andWhere('di.uninstallDate IS NULL')
            ->setParameter('vehicle', $vehicle)
            ->orderBy('di.installDate', Criteria::DESC)
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();
    }

    /**
     * @param Vehicle $vehicle
     * @param $date
     * @return null
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getDeviceByVehicleFromDate(Vehicle $vehicle, $date)
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('d')
            ->from(Device::class, 'd')
            ->leftJoin(DeviceInstallation::class, 'di', 'WITH', 'di.device = d.id')
            ->leftJoin('di.vehicle', 'v')
            ->where('v.id = :vehicle')
            ->andWhere('di.installDate <= :date')
            ->setParameter('vehicle', $vehicle)
            ->setParameter('date', $date)
            ->orderBy('di.installDate', Criteria::DESC)
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();
    }

    /**
     * @param int $deviceId
     * @return int|null
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getTeamIdByDeviceId(int $deviceId): ?int
    {
        $result = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('IDENTITY(d.team) AS team_id')
            ->from(Device::class, 'd')
            ->where('d.id = :deviceId')
            ->setParameter('deviceId', $deviceId)
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();

        return $result ? $result['team_id'] : null;
    }

    /**
     * @param string $imei
     * @return Device|null
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getDeviceByImei(string $imei)
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('d')
            ->from(Device::class, 'd')
            ->where('lower(d.imei) = lower(:imei)')
            ->setParameter('imei', $imei)
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();
    }

    /**
     * @param string $imei
     * @return int|null
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getDeviceIdByImei(string $imei): ?int
    {
        $result = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('d.id')
            ->from(Device::class, 'd')
            ->where('d.imei = :imei')
            ->setParameter('imei', $imei)
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();

        return $result ? $result['id'] : null;
    }

    public function getDeviceByIdAndCreatedByTeam(int $id, Team $team): ?Device
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $resellerTeamIds = $this->getEntityManager()->getRepository(Reseller::class)->getResellerClientTeams($team->getReseller());

        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('d')
            ->from(Device::class, 'd')
            ->andWhere('d.id = :id')
            ->andWhere(
                $qb->expr()->orX(
                    $qb->expr()->eq('d.team', ':team'),
                    $qb->expr()->in('d.team', ':resellerTeamIds')
                )
            )
            ->setParameter('id', $id)
            ->setParameter('team', $team)
            ->setParameter('resellerTeamIds', $resellerTeamIds)
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();
    }

    public function getDeviceIds(
        ?int $limit = null,
        ?string $orderBy = null,
        ?bool $asc = true,
        ?int $startDeviceId = null,
        ?int $finishDeviceId = null,
        ?bool $withVehicles = false,
        ?array $teamIds = null,
    ): array {
        $query = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('d.id')
            ->from(Device::class, 'd');

        if ($orderBy) {
            $query->orderBy($orderBy, ($asc ? Criteria::ASC : Criteria::DESC));
        }
        if ($limit) {
            $query->setMaxResults($limit);
        }
        if ($startDeviceId) {
            $query->andWhere('d.id >= :startDeviceId')
                ->setParameter('startDeviceId', $startDeviceId);
        }
        if ($finishDeviceId) {
            $query->andWhere('d.id <= :finishDeviceId')
                ->setParameter('finishDeviceId', $finishDeviceId);
        }
        if ($withVehicles) {
            $query->andWhere('d.vehicle IS NOT NULL');
        }
        if ($teamIds) {
            $query->andWhere('IDENTITY(d.team) IN (:teamIds)')
                ->setParameter('teamIds', $teamIds);
        }

        $result = $query->getQuery()->getResult();

        return $result ? array_column($result, 'id') : [];
    }

    /**
     * @param array $deviceIds
     * @param string|null $vendor
     * @param array|null $teamIds
     * @param int|null $startDeviceId
     * @param int|null $finishDeviceId
     * @param int|null $limit
     * @param string|null $orderBy
     * @param bool|null $asc
     * @return array
     */
    public function getDeviceIdsWithVendorName(
        array $deviceIds,
        ?string $vendor = null,
        ?array $teamIds = null,
        ?int $startDeviceId = null,
        ?int $finishDeviceId = null,
        ?int $limit = null,
        ?string $orderBy = 'd.id',
        ?bool $asc = true
    ): array {
        $query = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('d.id, dv.name AS vendorName')
            ->from(Device::class, 'd')
            ->leftJoin(DeviceModel::class, 'dm', Expr\Join::WITH, 'd.model = dm')
            ->leftJoin(DeviceVendor::class, 'dv', Expr\Join::WITH, 'dm.vendor = dv')
            ->where('d.id IN (:deviceIds)')
            ->setParameter('deviceIds', $deviceIds);

        if ($vendor) {
            $query->andWhere('LOWER(dv.name) LIKE LOWER(:vendor)')
                ->setParameter('vendor', $vendor);
        }
        if ($teamIds) {
            $query->andWhere('IDENTITY(d.team) IN (:teamIds)')
                ->setParameter('teamIds', $teamIds);
        }
        if ($startDeviceId) {
            $query->andWhere('d.id >= :startDeviceId')
                ->setParameter('startDeviceId', $startDeviceId);
        }
        if ($finishDeviceId) {
            $query->andWhere('d.id <= :finishDeviceId')
                ->setParameter('finishDeviceId', $finishDeviceId);
        }
        if ($orderBy) {
            $query->orderBy($orderBy, ($asc ? Criteria::ASC : Criteria::DESC));
        }
        if ($limit) {
            $query->setMaxResults($limit);
        }

        $result = $query->getQuery()->getResult();

        return $result ?: [];
    }

    /**
     * @param int $traccarDeviceId
     * @return Device|null
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getDeviceByTraccarDeviceId(int $traccarDeviceId)
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('d')
            ->from(Device::class, 'd')
            ->where('d.traccarDeviceId = :traccarDeviceId')
            ->setParameter('traccarDeviceId', $traccarDeviceId)
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();
    }

    /**
     * @param $id
     * @return Device|null
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getDeviceWithVehicle($id): ?Device
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('d')
            ->from(Device::class, 'd')
            ->andWhere('d.id = :id')
            ->andWhere('d.vehicle IS NOT NULL')
            ->andWhere('d.team IS NOT NULL')
            ->setParameter('id', $id)
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();
    }

    /**
     * @param array|null $deviceIds
     * @param array|null $teamIds
     * @param bool|null $withVehicle
     * @param string|null $orderBy
     * @param bool|null $asc
     * @param int|null $limit
     * @return \Doctrine\ORM\Query
     */
    public function getDevicesQuery(
        ?array $deviceIds = null,
        ?array $teamIds = null,
        ?bool $withVehicle = false,
        ?string $orderBy = null,
        ?bool $asc = true,
        ?int $limit = null
    ): Query {
        $qb = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('d')
            ->from(Device::class, 'd');

        if ($deviceIds) {
            $qb->andWhere('d.id IN (:deviceIds)')
                ->setParameter('deviceIds', $deviceIds);
        }
        if ($teamIds) {
            $qb->andWhere('IDENTITY(d.team) IN (:teamIds)')
                ->setParameter('teamIds', $teamIds);
        }
        if ($withVehicle) {
            $qb->andWhere('d.vehicle IS NOT NULL');
        }
        if ($orderBy) {
            $qb->orderBy($orderBy, ($asc ? Criteria::ASC : Criteria::DESC));
        }
        if ($limit) {
            $qb->setMaxResults($limit);
        }

        return $qb->getQuery();
    }

    /**
     * @param Team $team
     * @return Device[]
     */
    public function getDevicesByTeam(Team $team)
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('d')
            ->from(Device::class, 'd')
            ->where('d.team = :team')
            ->setParameter('team', $team)
            ->getQuery()
            ->getResult();
    }

    /**
     * @param array|null $deviceIds
     * @param array|null $teamIds
     * @param bool|null $withVehicle
     * @return int
     * @throws \Doctrine\ORM\NoResultException
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getDevicesCount(
        ?array $deviceIds = null,
        ?array $teamIds = null,
        ?bool $withVehicle = false,
    ): int {
        $query = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('COUNT(d.id)')
            ->from(Device::class, 'd');

        if ($deviceIds) {
            $query->andWhere('d.id IN (:deviceIds)')
                ->setParameter('deviceIds', $deviceIds);
        }
        if ($teamIds) {
            $query->andWhere('IDENTITY(d.team) IN (:teamIds)')
                ->setParameter('teamIds', $teamIds);
        }
        if ($withVehicle) {
            $query->andWhere('d.vehicle IS NOT NULL');
        }

        return $query->getQuery()->getSingleScalarResult();
    }

    public function getDevicesWithContractExpired()
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('d')
            ->from(Device::class, 'd')
            ->where('d.contractFinishAt < :now')
            ->setParameter('now', new \DateTime())
            ->getQuery()
            ->getResult();
    }

    public function getWaedByTeam(Team $team)
    {
        $setting = $team->getSettingsByName(Setting::TIMEZONE_SETTING);
        $timezone = $setting ? $this->getEntityManager()->getRepository(TimeZone::class)->find($setting->getValue()) : null;
        $tz = $timezone?->getName() ?? TimeZone::DEFAULT_TIMEZONE['name'];

        $result = $this
            ->getEntityManager()
            ->getConnection()
            ->createQueryBuilder()
            ->addSelect('count(d.contract_finish_at) as weight')
            ->addSelect('to_timestamp(TO_CHAR(d.contract_finish_at at time zone \'UTC\' at time zone :tz, \'dd/mm/yyyy\'), \'dd/mm/yyyy\') as ts_with_timezone')
            ->from($this->getEntityManager()->getClassMetadata(Device::class)->getTableName(), 'd')
            ->andWhere('d.team_id = :teamId')
            ->andWhere('TO_CHAR(d.contract_finish_at at time zone \'UTC\' at time zone :tz, \'dd/mm/yyyy\') is not null')
            ->setParameter('teamId', $team->getId())
            ->setParameter('tz', $tz)
            ->andWhere('d.status IN (:status)')
            ->setParameter('status',
                array_merge(Device::ACTIVE_STATUSES_LIST, [Device::STATUS_IN_STOCK, Device::STATUS_UNAVAILABLE]),
                Connection::PARAM_INT_ARRAY
            )->groupBy('ts_with_timezone')
            ->execute()->fetchAllAssociative();

        $data = array_map(function ($item) {
            return [
                'value' => Carbon::parse($item['ts_with_timezone'])->getTimestamp() * $item['weight'],
                'weight' => $item['weight']
            ];
        }, $result);

        if (!$data) {
            return null;
        }

        $res = array_sum(array_column($data, 'value')) / array_sum(array_column($data, 'weight'));

        return Carbon::parse($res)->shiftTimezone($tz)->setTimezone('UTC');
    }
}
